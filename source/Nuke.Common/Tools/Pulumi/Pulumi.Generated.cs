// Generated from https://github.com/Hawxy/nuke/blob/master/build/specifications/Pulumi.json

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Common.Tools.Pulumi
{
    /// <summary>
    ///   <p>Pulumi is controlled primarily using the command line interface (CLI). It works in conjunction with the Pulumi service to deploy changes to your cloud apps and infrastructure. It keeps a history of who updated what in your team and when. This CLI has been designed for great inner loop productivity, in addition to continuous integration and delivery scenarios.</p>
    ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiTasks
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public static string PulumiPath =>
            ToolPathResolver.TryGetEnvironmentExecutable("PULUMI_EXE") ??
            ToolPathResolver.GetPathExecutable("pulumi");
        public static Action<OutputType, string> PulumiLogger { get; set; } = ProcessTasks.DefaultLogger;
        /// <summary>
        ///   <p>Pulumi is controlled primarily using the command line interface (CLI). It works in conjunction with the Pulumi service to deploy changes to your cloud apps and infrastructure. It keeps a history of who updated what in your team and when. This CLI has been designed for great inner loop productivity, in addition to continuous integration and delivery scenarios.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> Pulumi(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(PulumiPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, PulumiLogger, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Cancel a stacks currently running update, if any.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="PulumiCancelSettings.Stack"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiCancelSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiCancelSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiCancelSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiCancelSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiCancelSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiCancelSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiCancelSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiCancelSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiCancelSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiCancelSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiCancelSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiCancelSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiCancel(PulumiCancelSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiCancelSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Cancel a stacks currently running update, if any.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="PulumiCancelSettings.Stack"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiCancelSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiCancelSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiCancelSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiCancelSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiCancelSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiCancelSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiCancelSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiCancelSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiCancelSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiCancelSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiCancelSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiCancelSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiCancel(Configure<PulumiCancelSettings> configurator)
        {
            return PulumiCancel(configurator(new PulumiCancelSettings()));
        }
        /// <summary>
        ///   <p>Cancel a stacks currently running update, if any.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="PulumiCancelSettings.Stack"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiCancelSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiCancelSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiCancelSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiCancelSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiCancelSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiCancelSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiCancelSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiCancelSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiCancelSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiCancelSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiCancelSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiCancelSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiCancelSettings Settings, IReadOnlyCollection<Output> Output)> PulumiCancel(CombinatorialConfigure<PulumiCancelSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiCancel, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Lists all configuration values for a specific stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiConfigSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiConfigSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigSettings.Profiling"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiConfigSettings.ShowSecrets"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfig(PulumiConfigSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiConfigSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Lists all configuration values for a specific stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiConfigSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiConfigSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigSettings.Profiling"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiConfigSettings.ShowSecrets"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfig(Configure<PulumiConfigSettings> configurator)
        {
            return PulumiConfig(configurator(new PulumiConfigSettings()));
        }
        /// <summary>
        ///   <p>Lists all configuration values for a specific stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiConfigSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiConfigSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigSettings.Profiling"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiConfigSettings.ShowSecrets"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiConfigSettings Settings, IReadOnlyCollection<Output> Output)> PulumiConfig(CombinatorialConfigure<PulumiConfigSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiConfig, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Get a single configuration value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiConfigGetSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiConfigGetSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigGetSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigGetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigGetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigGetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigGetSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiConfigGetSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigGetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigGetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigGetSettings.NonInteractive"/></li>
        ///     <li><c>--path</c> via <see cref="PulumiConfigGetSettings.Path"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigGetSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigGetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigGetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigGetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfigGet(PulumiConfigGetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiConfigGetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Get a single configuration value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiConfigGetSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiConfigGetSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigGetSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigGetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigGetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigGetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigGetSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiConfigGetSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigGetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigGetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigGetSettings.NonInteractive"/></li>
        ///     <li><c>--path</c> via <see cref="PulumiConfigGetSettings.Path"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigGetSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigGetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigGetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigGetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfigGet(Configure<PulumiConfigGetSettings> configurator)
        {
            return PulumiConfigGet(configurator(new PulumiConfigGetSettings()));
        }
        /// <summary>
        ///   <p>Get a single configuration value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiConfigGetSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiConfigGetSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigGetSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigGetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigGetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigGetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigGetSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiConfigGetSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigGetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigGetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigGetSettings.NonInteractive"/></li>
        ///     <li><c>--path</c> via <see cref="PulumiConfigGetSettings.Path"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigGetSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigGetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigGetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigGetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiConfigGetSettings Settings, IReadOnlyCollection<Output> Output)> PulumiConfigGet(CombinatorialConfigure<PulumiConfigGetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiConfigGet, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Update the local configuration based on the most recent deployment of the stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiConfigRefreshSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigRefreshSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigRefreshSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigRefreshSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigRefreshSettings.Emoji"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiConfigRefreshSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigRefreshSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigRefreshSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigRefreshSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigRefreshSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigRefreshSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigRefreshSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigRefreshSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigRefreshSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfigRefresh(PulumiConfigRefreshSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiConfigRefreshSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Update the local configuration based on the most recent deployment of the stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiConfigRefreshSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigRefreshSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigRefreshSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigRefreshSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigRefreshSettings.Emoji"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiConfigRefreshSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigRefreshSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigRefreshSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigRefreshSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigRefreshSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigRefreshSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigRefreshSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigRefreshSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigRefreshSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfigRefresh(Configure<PulumiConfigRefreshSettings> configurator)
        {
            return PulumiConfigRefresh(configurator(new PulumiConfigRefreshSettings()));
        }
        /// <summary>
        ///   <p>Update the local configuration based on the most recent deployment of the stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiConfigRefreshSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigRefreshSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigRefreshSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigRefreshSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigRefreshSettings.Emoji"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiConfigRefreshSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigRefreshSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigRefreshSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigRefreshSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigRefreshSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigRefreshSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigRefreshSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigRefreshSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigRefreshSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiConfigRefreshSettings Settings, IReadOnlyCollection<Output> Output)> PulumiConfigRefresh(CombinatorialConfigure<PulumiConfigRefreshSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiConfigRefresh, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove configuration value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiConfigRemoveSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiConfigRemoveSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigRemoveSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigRemoveSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--path</c> via <see cref="PulumiConfigRemoveSettings.Path"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigRemoveSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigRemoveSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfigRemove(PulumiConfigRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiConfigRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove configuration value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiConfigRemoveSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiConfigRemoveSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigRemoveSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigRemoveSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--path</c> via <see cref="PulumiConfigRemoveSettings.Path"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigRemoveSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigRemoveSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfigRemove(Configure<PulumiConfigRemoveSettings> configurator)
        {
            return PulumiConfigRemove(configurator(new PulumiConfigRemoveSettings()));
        }
        /// <summary>
        ///   <p>Remove configuration value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiConfigRemoveSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiConfigRemoveSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigRemoveSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigRemoveSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--path</c> via <see cref="PulumiConfigRemoveSettings.Path"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigRemoveSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigRemoveSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiConfigRemoveSettings Settings, IReadOnlyCollection<Output> Output)> PulumiConfigRemove(CombinatorialConfigure<PulumiConfigRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiConfigRemove, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Set configuration value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiConfigSetSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiConfigSetSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigSetSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigSetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigSetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigSetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigSetSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigSetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigSetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigSetSettings.NonInteractive"/></li>
        ///     <li><c>--path</c> via <see cref="PulumiConfigSetSettings.Path"/></li>
        ///     <li><c>--plaintext</c> via <see cref="PulumiConfigSetSettings.Plaintext"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigSetSettings.Profiling"/></li>
        ///     <li><c>--secret</c> via <see cref="PulumiConfigSetSettings.Secret"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigSetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigSetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfigSet(PulumiConfigSetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiConfigSetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Set configuration value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiConfigSetSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiConfigSetSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigSetSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigSetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigSetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigSetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigSetSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigSetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigSetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigSetSettings.NonInteractive"/></li>
        ///     <li><c>--path</c> via <see cref="PulumiConfigSetSettings.Path"/></li>
        ///     <li><c>--plaintext</c> via <see cref="PulumiConfigSetSettings.Plaintext"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigSetSettings.Profiling"/></li>
        ///     <li><c>--secret</c> via <see cref="PulumiConfigSetSettings.Secret"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigSetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigSetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiConfigSet(Configure<PulumiConfigSetSettings> configurator)
        {
            return PulumiConfigSet(configurator(new PulumiConfigSetSettings()));
        }
        /// <summary>
        ///   <p>Set configuration value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiConfigSetSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiConfigSetSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiConfigSetSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiConfigSetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiConfigSetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiConfigSetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiConfigSetSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiConfigSetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiConfigSetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiConfigSetSettings.NonInteractive"/></li>
        ///     <li><c>--path</c> via <see cref="PulumiConfigSetSettings.Path"/></li>
        ///     <li><c>--plaintext</c> via <see cref="PulumiConfigSetSettings.Plaintext"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiConfigSetSettings.Profiling"/></li>
        ///     <li><c>--secret</c> via <see cref="PulumiConfigSetSettings.Secret"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiConfigSetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiConfigSetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiConfigSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiConfigSetSettings Settings, IReadOnlyCollection<Output> Output)> PulumiConfigSet(CombinatorialConfigure<PulumiConfigSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiConfigSet, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Destroy an existing stack and its resources. Warning: this command is generally irreversible and should be used with great care.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiDestroySettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiDestroySettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiDestroySettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiDestroySettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiDestroySettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiDestroySettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiDestroySettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiDestroySettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiDestroySettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiDestroySettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiDestroySettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiDestroySettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiDestroySettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiDestroySettings.Profiling"/></li>
        ///     <li><c>--refresh</c> via <see cref="PulumiDestroySettings.Refresh"/></li>
        ///     <li><c>--show-config</c> via <see cref="PulumiDestroySettings.ShowConfig"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiDestroySettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiDestroySettings.ShowSames"/></li>
        ///     <li><c>--skip-preview</c> via <see cref="PulumiDestroySettings.SkipPreview"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiDestroySettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiDestroySettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiDestroySettings.Target"/></li>
        ///     <li><c>--target-dependents</c> via <see cref="PulumiDestroySettings.TargetDependents"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiDestroySettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiDestroySettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiDestroySettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiDestroy(PulumiDestroySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiDestroySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Destroy an existing stack and its resources. Warning: this command is generally irreversible and should be used with great care.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiDestroySettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiDestroySettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiDestroySettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiDestroySettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiDestroySettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiDestroySettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiDestroySettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiDestroySettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiDestroySettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiDestroySettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiDestroySettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiDestroySettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiDestroySettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiDestroySettings.Profiling"/></li>
        ///     <li><c>--refresh</c> via <see cref="PulumiDestroySettings.Refresh"/></li>
        ///     <li><c>--show-config</c> via <see cref="PulumiDestroySettings.ShowConfig"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiDestroySettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiDestroySettings.ShowSames"/></li>
        ///     <li><c>--skip-preview</c> via <see cref="PulumiDestroySettings.SkipPreview"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiDestroySettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiDestroySettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiDestroySettings.Target"/></li>
        ///     <li><c>--target-dependents</c> via <see cref="PulumiDestroySettings.TargetDependents"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiDestroySettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiDestroySettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiDestroySettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiDestroy(Configure<PulumiDestroySettings> configurator)
        {
            return PulumiDestroy(configurator(new PulumiDestroySettings()));
        }
        /// <summary>
        ///   <p>Destroy an existing stack and its resources. Warning: this command is generally irreversible and should be used with great care.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiDestroySettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiDestroySettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiDestroySettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiDestroySettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiDestroySettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiDestroySettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiDestroySettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiDestroySettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiDestroySettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiDestroySettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiDestroySettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiDestroySettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiDestroySettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiDestroySettings.Profiling"/></li>
        ///     <li><c>--refresh</c> via <see cref="PulumiDestroySettings.Refresh"/></li>
        ///     <li><c>--show-config</c> via <see cref="PulumiDestroySettings.ShowConfig"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiDestroySettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiDestroySettings.ShowSames"/></li>
        ///     <li><c>--skip-preview</c> via <see cref="PulumiDestroySettings.SkipPreview"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiDestroySettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiDestroySettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiDestroySettings.Target"/></li>
        ///     <li><c>--target-dependents</c> via <see cref="PulumiDestroySettings.TargetDependents"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiDestroySettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiDestroySettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiDestroySettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiDestroySettings Settings, IReadOnlyCollection<Output> Output)> PulumiDestroy(CombinatorialConfigure<PulumiDestroySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiDestroy, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Update history for a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiHistorySettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiHistorySettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiHistorySettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiHistorySettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiHistorySettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiHistorySettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiHistorySettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiHistorySettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiHistorySettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiHistorySettings.Profiling"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiHistorySettings.ShowSecrets"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiHistorySettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiHistorySettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiHistorySettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiHistory(PulumiHistorySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiHistorySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Update history for a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiHistorySettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiHistorySettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiHistorySettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiHistorySettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiHistorySettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiHistorySettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiHistorySettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiHistorySettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiHistorySettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiHistorySettings.Profiling"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiHistorySettings.ShowSecrets"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiHistorySettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiHistorySettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiHistorySettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiHistory(Configure<PulumiHistorySettings> configurator)
        {
            return PulumiHistory(configurator(new PulumiHistorySettings()));
        }
        /// <summary>
        ///   <p>Update history for a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiHistorySettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiHistorySettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiHistorySettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiHistorySettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiHistorySettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiHistorySettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiHistorySettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiHistorySettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiHistorySettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiHistorySettings.Profiling"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiHistorySettings.ShowSecrets"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiHistorySettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiHistorySettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiHistorySettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiHistorySettings Settings, IReadOnlyCollection<Output> Output)> PulumiHistory(CombinatorialConfigure<PulumiHistorySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiHistory, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Log onto the Pulumi stack. For CI/CD scenarios, an env variable of <c>PULUMI_ACCESS_TOKEN</c> should be set.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;location&gt;</c> via <see cref="PulumiLoginSettings.Location"/></li>
        ///     <li><c>--cloud-url</c> via <see cref="PulumiLoginSettings.CloudUrl"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiLoginSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiLoginSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiLoginSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiLoginSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiLoginSettings.Help"/></li>
        ///     <li><c>--local</c> via <see cref="PulumiLoginSettings.Local"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiLoginSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiLoginSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiLoginSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiLoginSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiLoginSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiLoginSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiLogin(PulumiLoginSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiLoginSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Log onto the Pulumi stack. For CI/CD scenarios, an env variable of <c>PULUMI_ACCESS_TOKEN</c> should be set.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;location&gt;</c> via <see cref="PulumiLoginSettings.Location"/></li>
        ///     <li><c>--cloud-url</c> via <see cref="PulumiLoginSettings.CloudUrl"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiLoginSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiLoginSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiLoginSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiLoginSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiLoginSettings.Help"/></li>
        ///     <li><c>--local</c> via <see cref="PulumiLoginSettings.Local"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiLoginSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiLoginSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiLoginSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiLoginSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiLoginSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiLoginSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiLogin(Configure<PulumiLoginSettings> configurator)
        {
            return PulumiLogin(configurator(new PulumiLoginSettings()));
        }
        /// <summary>
        ///   <p>Log onto the Pulumi stack. For CI/CD scenarios, an env variable of <c>PULUMI_ACCESS_TOKEN</c> should be set.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;location&gt;</c> via <see cref="PulumiLoginSettings.Location"/></li>
        ///     <li><c>--cloud-url</c> via <see cref="PulumiLoginSettings.CloudUrl"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiLoginSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiLoginSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiLoginSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiLoginSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiLoginSettings.Help"/></li>
        ///     <li><c>--local</c> via <see cref="PulumiLoginSettings.Local"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiLoginSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiLoginSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiLoginSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiLoginSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiLoginSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiLoginSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiLoginSettings Settings, IReadOnlyCollection<Output> Output)> PulumiLogin(CombinatorialConfigure<PulumiLoginSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiLogin, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Log out of the Pulumi service.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;location&gt;</c> via <see cref="PulumiLogoutSettings.Location"/></li>
        ///     <li><c>--cloud-url</c> via <see cref="PulumiLogoutSettings.CloudUrl"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiLogoutSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiLogoutSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiLogoutSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiLogoutSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiLogoutSettings.Help"/></li>
        ///     <li><c>--local</c> via <see cref="PulumiLogoutSettings.Local"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiLogoutSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiLogoutSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiLogoutSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiLogoutSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiLogoutSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiLogoutSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiLogout(PulumiLogoutSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiLogoutSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Log out of the Pulumi service.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;location&gt;</c> via <see cref="PulumiLogoutSettings.Location"/></li>
        ///     <li><c>--cloud-url</c> via <see cref="PulumiLogoutSettings.CloudUrl"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiLogoutSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiLogoutSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiLogoutSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiLogoutSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiLogoutSettings.Help"/></li>
        ///     <li><c>--local</c> via <see cref="PulumiLogoutSettings.Local"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiLogoutSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiLogoutSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiLogoutSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiLogoutSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiLogoutSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiLogoutSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiLogout(Configure<PulumiLogoutSettings> configurator)
        {
            return PulumiLogout(configurator(new PulumiLogoutSettings()));
        }
        /// <summary>
        ///   <p>Log out of the Pulumi service.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;location&gt;</c> via <see cref="PulumiLogoutSettings.Location"/></li>
        ///     <li><c>--cloud-url</c> via <see cref="PulumiLogoutSettings.CloudUrl"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiLogoutSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiLogoutSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiLogoutSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiLogoutSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiLogoutSettings.Help"/></li>
        ///     <li><c>--local</c> via <see cref="PulumiLogoutSettings.Local"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiLogoutSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiLogoutSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiLogoutSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiLogoutSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiLogoutSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiLogoutSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiLogoutSettings Settings, IReadOnlyCollection<Output> Output)> PulumiLogout(CombinatorialConfigure<PulumiLogoutSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiLogout, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Show aggregated logs for a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiLogsSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiLogsSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiLogsSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiLogsSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiLogsSettings.Emoji"/></li>
        ///     <li><c>--follow</c> via <see cref="PulumiLogsSettings.Follow"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiLogsSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiLogsSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiLogsSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiLogsSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiLogsSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiLogsSettings.Profiling"/></li>
        ///     <li><c>--resource</c> via <see cref="PulumiLogsSettings.Resource"/></li>
        ///     <li><c>--since</c> via <see cref="PulumiLogsSettings.Since"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiLogsSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiLogsSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiLogsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiLogs(PulumiLogsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiLogsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Show aggregated logs for a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiLogsSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiLogsSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiLogsSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiLogsSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiLogsSettings.Emoji"/></li>
        ///     <li><c>--follow</c> via <see cref="PulumiLogsSettings.Follow"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiLogsSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiLogsSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiLogsSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiLogsSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiLogsSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiLogsSettings.Profiling"/></li>
        ///     <li><c>--resource</c> via <see cref="PulumiLogsSettings.Resource"/></li>
        ///     <li><c>--since</c> via <see cref="PulumiLogsSettings.Since"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiLogsSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiLogsSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiLogsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiLogs(Configure<PulumiLogsSettings> configurator)
        {
            return PulumiLogs(configurator(new PulumiLogsSettings()));
        }
        /// <summary>
        ///   <p>Show aggregated logs for a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiLogsSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiLogsSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiLogsSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiLogsSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiLogsSettings.Emoji"/></li>
        ///     <li><c>--follow</c> via <see cref="PulumiLogsSettings.Follow"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiLogsSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiLogsSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiLogsSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiLogsSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiLogsSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiLogsSettings.Profiling"/></li>
        ///     <li><c>--resource</c> via <see cref="PulumiLogsSettings.Resource"/></li>
        ///     <li><c>--since</c> via <see cref="PulumiLogsSettings.Since"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiLogsSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiLogsSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiLogsSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiLogsSettings Settings, IReadOnlyCollection<Output> Output)> PulumiLogs(CombinatorialConfigure<PulumiLogsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiLogs, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Install one or more plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;kindNameVersion&gt;</c> via <see cref="PulumiPluginInstallSettings.KindNameVersion"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiPluginInstallSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPluginInstallSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPluginInstallSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPluginInstallSettings.Emoji"/></li>
        ///     <li><c>--exact</c> via <see cref="PulumiPluginInstallSettings.Exact"/></li>
        ///     <li><c>--file</c> via <see cref="PulumiPluginInstallSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPluginInstallSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPluginInstallSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPluginInstallSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPluginInstallSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPluginInstallSettings.Profiling"/></li>
        ///     <li><c>--reinstall</c> via <see cref="PulumiPluginInstallSettings.Reinstall"/></li>
        ///     <li><c>--server</c> via <see cref="PulumiPluginInstallSettings.Server"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPluginInstallSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPluginInstallSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiPluginInstall(PulumiPluginInstallSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiPluginInstallSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Install one or more plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;kindNameVersion&gt;</c> via <see cref="PulumiPluginInstallSettings.KindNameVersion"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiPluginInstallSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPluginInstallSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPluginInstallSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPluginInstallSettings.Emoji"/></li>
        ///     <li><c>--exact</c> via <see cref="PulumiPluginInstallSettings.Exact"/></li>
        ///     <li><c>--file</c> via <see cref="PulumiPluginInstallSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPluginInstallSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPluginInstallSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPluginInstallSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPluginInstallSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPluginInstallSettings.Profiling"/></li>
        ///     <li><c>--reinstall</c> via <see cref="PulumiPluginInstallSettings.Reinstall"/></li>
        ///     <li><c>--server</c> via <see cref="PulumiPluginInstallSettings.Server"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPluginInstallSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPluginInstallSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiPluginInstall(Configure<PulumiPluginInstallSettings> configurator)
        {
            return PulumiPluginInstall(configurator(new PulumiPluginInstallSettings()));
        }
        /// <summary>
        ///   <p>Install one or more plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;kindNameVersion&gt;</c> via <see cref="PulumiPluginInstallSettings.KindNameVersion"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiPluginInstallSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPluginInstallSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPluginInstallSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPluginInstallSettings.Emoji"/></li>
        ///     <li><c>--exact</c> via <see cref="PulumiPluginInstallSettings.Exact"/></li>
        ///     <li><c>--file</c> via <see cref="PulumiPluginInstallSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPluginInstallSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPluginInstallSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPluginInstallSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPluginInstallSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPluginInstallSettings.Profiling"/></li>
        ///     <li><c>--reinstall</c> via <see cref="PulumiPluginInstallSettings.Reinstall"/></li>
        ///     <li><c>--server</c> via <see cref="PulumiPluginInstallSettings.Server"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPluginInstallSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPluginInstallSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiPluginInstallSettings Settings, IReadOnlyCollection<Output> Output)> PulumiPluginInstall(CombinatorialConfigure<PulumiPluginInstallSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiPluginInstall, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiPluginListSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPluginListSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPluginListSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPluginListSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPluginListSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiPluginListSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPluginListSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPluginListSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPluginListSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPluginListSettings.Profiling"/></li>
        ///     <li><c>--project</c> via <see cref="PulumiPluginListSettings.Project"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPluginListSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPluginListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiPluginList(PulumiPluginListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiPluginListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiPluginListSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPluginListSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPluginListSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPluginListSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPluginListSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiPluginListSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPluginListSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPluginListSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPluginListSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPluginListSettings.Profiling"/></li>
        ///     <li><c>--project</c> via <see cref="PulumiPluginListSettings.Project"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPluginListSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPluginListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiPluginList(Configure<PulumiPluginListSettings> configurator)
        {
            return PulumiPluginList(configurator(new PulumiPluginListSettings()));
        }
        /// <summary>
        ///   <p>List plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiPluginListSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPluginListSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPluginListSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPluginListSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPluginListSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiPluginListSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPluginListSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPluginListSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPluginListSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPluginListSettings.Profiling"/></li>
        ///     <li><c>--project</c> via <see cref="PulumiPluginListSettings.Project"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPluginListSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPluginListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiPluginListSettings Settings, IReadOnlyCollection<Output> Output)> PulumiPluginList(CombinatorialConfigure<PulumiPluginListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiPluginList, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;kindNameVersion&gt;</c> via <see cref="PulumiPluginRemoveSettings.KindNameVersion"/></li>
        ///     <li><c>--all</c> via <see cref="PulumiPluginRemoveSettings.All"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiPluginRemoveSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPluginRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPluginRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPluginRemoveSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPluginRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPluginRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPluginRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPluginRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPluginRemoveSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPluginRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPluginRemoveSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiPluginRemoveSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiPluginRemove(PulumiPluginRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiPluginRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;kindNameVersion&gt;</c> via <see cref="PulumiPluginRemoveSettings.KindNameVersion"/></li>
        ///     <li><c>--all</c> via <see cref="PulumiPluginRemoveSettings.All"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiPluginRemoveSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPluginRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPluginRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPluginRemoveSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPluginRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPluginRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPluginRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPluginRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPluginRemoveSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPluginRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPluginRemoveSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiPluginRemoveSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiPluginRemove(Configure<PulumiPluginRemoveSettings> configurator)
        {
            return PulumiPluginRemove(configurator(new PulumiPluginRemoveSettings()));
        }
        /// <summary>
        ///   <p>Remove plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;kindNameVersion&gt;</c> via <see cref="PulumiPluginRemoveSettings.KindNameVersion"/></li>
        ///     <li><c>--all</c> via <see cref="PulumiPluginRemoveSettings.All"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiPluginRemoveSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPluginRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPluginRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPluginRemoveSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPluginRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPluginRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPluginRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPluginRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPluginRemoveSettings.Profiling"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPluginRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPluginRemoveSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiPluginRemoveSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiPluginRemoveSettings Settings, IReadOnlyCollection<Output> Output)> PulumiPluginRemove(CombinatorialConfigure<PulumiPluginRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiPluginRemove, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Show a preview of updates to a stack's resources.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiPreviewSettings.Color"/></li>
        ///     <li><c>--config</c> via <see cref="PulumiPreviewSettings.Config"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiPreviewSettings.ConfigFile"/></li>
        ///     <li><c>--config-path</c> via <see cref="PulumiPreviewSettings.ConfigPath"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPreviewSettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiPreviewSettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiPreviewSettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPreviewSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPreviewSettings.Emoji"/></li>
        ///     <li><c>--expect-no-changes</c> via <see cref="PulumiPreviewSettings.ExpectNoChanges"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPreviewSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiPreviewSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPreviewSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPreviewSettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiPreviewSettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPreviewSettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiPreviewSettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPreviewSettings.Profiling"/></li>
        ///     <li><c>--refresh</c> via <see cref="PulumiPreviewSettings.Refresh"/></li>
        ///     <li><c>--replace</c> via <see cref="PulumiPreviewSettings.Replace"/></li>
        ///     <li><c>--show-config</c> via <see cref="PulumiPreviewSettings.ShowConfig"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiPreviewSettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiPreviewSettings.ShowSames"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiPreviewSettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiPreviewSettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiPreviewSettings.Target"/></li>
        ///     <li><c>--target-dependents</c> via <see cref="PulumiPreviewSettings.TargetDependents"/></li>
        ///     <li><c>--target-replace</c> via <see cref="PulumiPreviewSettings.TargetReplace"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPreviewSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPreviewSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiPreview(PulumiPreviewSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiPreviewSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Show a preview of updates to a stack's resources.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiPreviewSettings.Color"/></li>
        ///     <li><c>--config</c> via <see cref="PulumiPreviewSettings.Config"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiPreviewSettings.ConfigFile"/></li>
        ///     <li><c>--config-path</c> via <see cref="PulumiPreviewSettings.ConfigPath"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPreviewSettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiPreviewSettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiPreviewSettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPreviewSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPreviewSettings.Emoji"/></li>
        ///     <li><c>--expect-no-changes</c> via <see cref="PulumiPreviewSettings.ExpectNoChanges"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPreviewSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiPreviewSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPreviewSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPreviewSettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiPreviewSettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPreviewSettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiPreviewSettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPreviewSettings.Profiling"/></li>
        ///     <li><c>--refresh</c> via <see cref="PulumiPreviewSettings.Refresh"/></li>
        ///     <li><c>--replace</c> via <see cref="PulumiPreviewSettings.Replace"/></li>
        ///     <li><c>--show-config</c> via <see cref="PulumiPreviewSettings.ShowConfig"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiPreviewSettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiPreviewSettings.ShowSames"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiPreviewSettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiPreviewSettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiPreviewSettings.Target"/></li>
        ///     <li><c>--target-dependents</c> via <see cref="PulumiPreviewSettings.TargetDependents"/></li>
        ///     <li><c>--target-replace</c> via <see cref="PulumiPreviewSettings.TargetReplace"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPreviewSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPreviewSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiPreview(Configure<PulumiPreviewSettings> configurator)
        {
            return PulumiPreview(configurator(new PulumiPreviewSettings()));
        }
        /// <summary>
        ///   <p>Show a preview of updates to a stack's resources.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiPreviewSettings.Color"/></li>
        ///     <li><c>--config</c> via <see cref="PulumiPreviewSettings.Config"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiPreviewSettings.ConfigFile"/></li>
        ///     <li><c>--config-path</c> via <see cref="PulumiPreviewSettings.ConfigPath"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiPreviewSettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiPreviewSettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiPreviewSettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiPreviewSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiPreviewSettings.Emoji"/></li>
        ///     <li><c>--expect-no-changes</c> via <see cref="PulumiPreviewSettings.ExpectNoChanges"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiPreviewSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiPreviewSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiPreviewSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiPreviewSettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiPreviewSettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiPreviewSettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiPreviewSettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiPreviewSettings.Profiling"/></li>
        ///     <li><c>--refresh</c> via <see cref="PulumiPreviewSettings.Refresh"/></li>
        ///     <li><c>--replace</c> via <see cref="PulumiPreviewSettings.Replace"/></li>
        ///     <li><c>--show-config</c> via <see cref="PulumiPreviewSettings.ShowConfig"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiPreviewSettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiPreviewSettings.ShowSames"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiPreviewSettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiPreviewSettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiPreviewSettings.Target"/></li>
        ///     <li><c>--target-dependents</c> via <see cref="PulumiPreviewSettings.TargetDependents"/></li>
        ///     <li><c>--target-replace</c> via <see cref="PulumiPreviewSettings.TargetReplace"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiPreviewSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiPreviewSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiPreviewSettings Settings, IReadOnlyCollection<Output> Output)> PulumiPreview(CombinatorialConfigure<PulumiPreviewSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiPreview, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Refresh the resources in a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiRefreshSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiRefreshSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiRefreshSettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiRefreshSettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiRefreshSettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiRefreshSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiRefreshSettings.Emoji"/></li>
        ///     <li><c>--expect-no-changes</c> via <see cref="PulumiRefreshSettings.ExpectNoChanges"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiRefreshSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiRefreshSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiRefreshSettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiRefreshSettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiRefreshSettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiRefreshSettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiRefreshSettings.Profiling"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiRefreshSettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiRefreshSettings.ShowSames"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiRefreshSettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiRefreshSettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiRefreshSettings.Target"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiRefreshSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiRefreshSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiRefreshSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiRefresh(PulumiRefreshSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiRefreshSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Refresh the resources in a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiRefreshSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiRefreshSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiRefreshSettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiRefreshSettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiRefreshSettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiRefreshSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiRefreshSettings.Emoji"/></li>
        ///     <li><c>--expect-no-changes</c> via <see cref="PulumiRefreshSettings.ExpectNoChanges"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiRefreshSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiRefreshSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiRefreshSettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiRefreshSettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiRefreshSettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiRefreshSettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiRefreshSettings.Profiling"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiRefreshSettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiRefreshSettings.ShowSames"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiRefreshSettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiRefreshSettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiRefreshSettings.Target"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiRefreshSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiRefreshSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiRefreshSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiRefresh(Configure<PulumiRefreshSettings> configurator)
        {
            return PulumiRefresh(configurator(new PulumiRefreshSettings()));
        }
        /// <summary>
        ///   <p>Refresh the resources in a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiRefreshSettings.Color"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiRefreshSettings.ConfigFile"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiRefreshSettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiRefreshSettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiRefreshSettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiRefreshSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiRefreshSettings.Emoji"/></li>
        ///     <li><c>--expect-no-changes</c> via <see cref="PulumiRefreshSettings.ExpectNoChanges"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiRefreshSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiRefreshSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiRefreshSettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiRefreshSettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiRefreshSettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiRefreshSettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiRefreshSettings.Profiling"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiRefreshSettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiRefreshSettings.ShowSames"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiRefreshSettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiRefreshSettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiRefreshSettings.Target"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiRefreshSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiRefreshSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiRefreshSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiRefreshSettings Settings, IReadOnlyCollection<Output> Output)> PulumiRefresh(CombinatorialConfigure<PulumiRefreshSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiRefresh, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStack(PulumiStackSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStack(Configure<PulumiStackSettings> configurator)
        {
            return PulumiStack(configurator(new PulumiStackSettings()));
        }
        /// <summary>
        ///   <p>Manage stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStack(CombinatorialConfigure<PulumiStackSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStack, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Export a stack's deployment to standard out.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackExportSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackExportSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackExportSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackExportSettings.Emoji"/></li>
        ///     <li><c>--file</c> via <see cref="PulumiStackExportSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackExportSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackExportSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackExportSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackExportSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackExportSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackExportSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackExportSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackExportSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackExportSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackExportSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackExportSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackExport(PulumiStackExportSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackExportSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Export a stack's deployment to standard out.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackExportSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackExportSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackExportSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackExportSettings.Emoji"/></li>
        ///     <li><c>--file</c> via <see cref="PulumiStackExportSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackExportSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackExportSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackExportSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackExportSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackExportSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackExportSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackExportSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackExportSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackExportSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackExportSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackExportSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackExport(Configure<PulumiStackExportSettings> configurator)
        {
            return PulumiStackExport(configurator(new PulumiStackExportSettings()));
        }
        /// <summary>
        ///   <p>Export a stack's deployment to standard out.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackExportSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackExportSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackExportSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackExportSettings.Emoji"/></li>
        ///     <li><c>--file</c> via <see cref="PulumiStackExportSettings.File"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackExportSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackExportSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackExportSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackExportSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackExportSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackExportSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackExportSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackExportSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackExportSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackExportSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackExportSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackExportSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackExport(CombinatorialConfigure<PulumiStackExportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackExport, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Export a stack's dependency graph to a file.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;file&gt;</c> via <see cref="PulumiStackGraphSettings.File"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackGraphSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackGraphSettings.WorkingDirectory"/></li>
        ///     <li><c>--dependency-edge-color</c> via <see cref="PulumiStackGraphSettings.DependencyEdgeColor"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackGraphSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackGraphSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackGraphSettings.Help"/></li>
        ///     <li><c>--ignore-dependency-edges</c> via <see cref="PulumiStackGraphSettings.IgnoreDependencyEdges"/></li>
        ///     <li><c>--ignore-dependency-edges</c> via <see cref="PulumiStackGraphSettings.IgnoreParentEdges"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackGraphSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackGraphSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackGraphSettings.NonInteractive"/></li>
        ///     <li><c>--parent-edge-color</c> via <see cref="PulumiStackGraphSettings.ParentEdgeColor"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackGraphSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackGraphSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackGraphSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackGraphSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackGraphSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackGraphSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackGraphSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackGraph(PulumiStackGraphSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackGraphSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Export a stack's dependency graph to a file.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;file&gt;</c> via <see cref="PulumiStackGraphSettings.File"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackGraphSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackGraphSettings.WorkingDirectory"/></li>
        ///     <li><c>--dependency-edge-color</c> via <see cref="PulumiStackGraphSettings.DependencyEdgeColor"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackGraphSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackGraphSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackGraphSettings.Help"/></li>
        ///     <li><c>--ignore-dependency-edges</c> via <see cref="PulumiStackGraphSettings.IgnoreDependencyEdges"/></li>
        ///     <li><c>--ignore-dependency-edges</c> via <see cref="PulumiStackGraphSettings.IgnoreParentEdges"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackGraphSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackGraphSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackGraphSettings.NonInteractive"/></li>
        ///     <li><c>--parent-edge-color</c> via <see cref="PulumiStackGraphSettings.ParentEdgeColor"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackGraphSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackGraphSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackGraphSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackGraphSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackGraphSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackGraphSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackGraphSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackGraph(Configure<PulumiStackGraphSettings> configurator)
        {
            return PulumiStackGraph(configurator(new PulumiStackGraphSettings()));
        }
        /// <summary>
        ///   <p>Export a stack's dependency graph to a file.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;file&gt;</c> via <see cref="PulumiStackGraphSettings.File"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackGraphSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackGraphSettings.WorkingDirectory"/></li>
        ///     <li><c>--dependency-edge-color</c> via <see cref="PulumiStackGraphSettings.DependencyEdgeColor"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackGraphSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackGraphSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackGraphSettings.Help"/></li>
        ///     <li><c>--ignore-dependency-edges</c> via <see cref="PulumiStackGraphSettings.IgnoreDependencyEdges"/></li>
        ///     <li><c>--ignore-dependency-edges</c> via <see cref="PulumiStackGraphSettings.IgnoreParentEdges"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackGraphSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackGraphSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackGraphSettings.NonInteractive"/></li>
        ///     <li><c>--parent-edge-color</c> via <see cref="PulumiStackGraphSettings.ParentEdgeColor"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackGraphSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackGraphSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackGraphSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackGraphSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackGraphSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackGraphSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackGraphSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackGraphSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackGraph(CombinatorialConfigure<PulumiStackGraphSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackGraph, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Import a deployment from standard in into an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackImportSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackImportSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackImportSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackImportSettings.Emoji"/></li>
        ///     <li><c>--file</c> via <see cref="PulumiStackImportSettings.File"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiStackImportSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackImportSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackImportSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackImportSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackImportSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackImportSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackImportSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackImportSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackImportSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackImportSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackImportSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackImportSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackImport(PulumiStackImportSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackImportSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Import a deployment from standard in into an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackImportSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackImportSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackImportSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackImportSettings.Emoji"/></li>
        ///     <li><c>--file</c> via <see cref="PulumiStackImportSettings.File"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiStackImportSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackImportSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackImportSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackImportSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackImportSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackImportSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackImportSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackImportSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackImportSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackImportSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackImportSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackImportSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackImport(Configure<PulumiStackImportSettings> configurator)
        {
            return PulumiStackImport(configurator(new PulumiStackImportSettings()));
        }
        /// <summary>
        ///   <p>Import a deployment from standard in into an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackImportSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackImportSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackImportSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackImportSettings.Emoji"/></li>
        ///     <li><c>--file</c> via <see cref="PulumiStackImportSettings.File"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiStackImportSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackImportSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackImportSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackImportSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackImportSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackImportSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackImportSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackImportSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackImportSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackImportSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackImportSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackImportSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackImportSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackImport(CombinatorialConfigure<PulumiStackImportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackImport, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create an empty stack with the given name, ready for updates.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackInitSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackInitSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackInitSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackInitSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackInitSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackInitSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackInitSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackInitSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackInitSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackInitSettings.Profiling"/></li>
        ///     <li><c>--secrets-provider</c> via <see cref="PulumiStackInitSettings.SecretsProvider"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackInitSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackInitSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackInitSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackInitSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackInitSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackInitSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackInit(PulumiStackInitSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackInitSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create an empty stack with the given name, ready for updates.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackInitSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackInitSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackInitSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackInitSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackInitSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackInitSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackInitSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackInitSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackInitSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackInitSettings.Profiling"/></li>
        ///     <li><c>--secrets-provider</c> via <see cref="PulumiStackInitSettings.SecretsProvider"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackInitSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackInitSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackInitSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackInitSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackInitSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackInitSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackInit(Configure<PulumiStackInitSettings> configurator)
        {
            return PulumiStackInit(configurator(new PulumiStackInitSettings()));
        }
        /// <summary>
        ///   <p>Create an empty stack with the given name, ready for updates.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackInitSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackInitSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackInitSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackInitSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackInitSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackInitSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackInitSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackInitSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackInitSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackInitSettings.Profiling"/></li>
        ///     <li><c>--secrets-provider</c> via <see cref="PulumiStackInitSettings.SecretsProvider"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackInitSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackInitSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackInitSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackInitSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackInitSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackInitSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackInitSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackInit(CombinatorialConfigure<PulumiStackInitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackInit, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--all</c> via <see cref="PulumiStackListSettings.All"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackListSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackListSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackListSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackListSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackListSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiStackListSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackListSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackListSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackListSettings.NonInteractive"/></li>
        ///     <li><c>--organization</c> via <see cref="PulumiStackListSettings.Organization"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackListSettings.Profiling"/></li>
        ///     <li><c>--project</c> via <see cref="PulumiStackListSettings.Project"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackListSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackListSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackListSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackListSettings.Stack"/></li>
        ///     <li><c>--tag</c> via <see cref="PulumiStackListSettings.Tag"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackListSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackList(PulumiStackListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--all</c> via <see cref="PulumiStackListSettings.All"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackListSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackListSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackListSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackListSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackListSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiStackListSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackListSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackListSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackListSettings.NonInteractive"/></li>
        ///     <li><c>--organization</c> via <see cref="PulumiStackListSettings.Organization"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackListSettings.Profiling"/></li>
        ///     <li><c>--project</c> via <see cref="PulumiStackListSettings.Project"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackListSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackListSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackListSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackListSettings.Stack"/></li>
        ///     <li><c>--tag</c> via <see cref="PulumiStackListSettings.Tag"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackListSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackList(Configure<PulumiStackListSettings> configurator)
        {
            return PulumiStackList(configurator(new PulumiStackListSettings()));
        }
        /// <summary>
        ///   <p>List stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--all</c> via <see cref="PulumiStackListSettings.All"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackListSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackListSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackListSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackListSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackListSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiStackListSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackListSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackListSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackListSettings.NonInteractive"/></li>
        ///     <li><c>--organization</c> via <see cref="PulumiStackListSettings.Organization"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackListSettings.Profiling"/></li>
        ///     <li><c>--project</c> via <see cref="PulumiStackListSettings.Project"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackListSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackListSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackListSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackListSettings.Stack"/></li>
        ///     <li><c>--tag</c> via <see cref="PulumiStackListSettings.Tag"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackListSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackListSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackList(CombinatorialConfigure<PulumiStackListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackList, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Show a stacks output properties.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;propertyName&gt;</c> via <see cref="PulumiStackOutputSettings.PropertyName"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackOutputSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackOutputSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackOutputSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackOutputSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackOutputSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiStackOutputSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackOutputSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackOutputSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackOutputSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackOutputSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackOutputSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackOutputSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackOutputSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackOutputSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackOutputSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackOutputSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackOutput(PulumiStackOutputSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackOutputSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Show a stacks output properties.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;propertyName&gt;</c> via <see cref="PulumiStackOutputSettings.PropertyName"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackOutputSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackOutputSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackOutputSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackOutputSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackOutputSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiStackOutputSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackOutputSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackOutputSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackOutputSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackOutputSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackOutputSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackOutputSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackOutputSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackOutputSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackOutputSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackOutputSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackOutput(Configure<PulumiStackOutputSettings> configurator)
        {
            return PulumiStackOutput(configurator(new PulumiStackOutputSettings()));
        }
        /// <summary>
        ///   <p>Show a stacks output properties.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;propertyName&gt;</c> via <see cref="PulumiStackOutputSettings.PropertyName"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackOutputSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackOutputSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackOutputSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackOutputSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackOutputSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiStackOutputSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackOutputSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackOutputSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackOutputSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackOutputSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackOutputSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackOutputSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackOutputSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackOutputSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackOutputSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackOutputSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackOutputSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackOutput(CombinatorialConfigure<PulumiStackOutputSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackOutput, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Rename an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackRenameSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackRenameSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackRenameSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackRenameSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackRenameSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackRenameSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackRenameSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackRenameSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackRenameSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackRenameSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackRenameSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackRenameSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackRenameSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackRenameSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackRenameSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackRenameSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackRename(PulumiStackRenameSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackRenameSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Rename an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackRenameSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackRenameSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackRenameSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackRenameSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackRenameSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackRenameSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackRenameSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackRenameSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackRenameSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackRenameSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackRenameSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackRenameSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackRenameSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackRenameSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackRenameSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackRenameSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackRename(Configure<PulumiStackRenameSettings> configurator)
        {
            return PulumiStackRename(configurator(new PulumiStackRenameSettings()));
        }
        /// <summary>
        ///   <p>Rename an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackRenameSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackRenameSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackRenameSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackRenameSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackRenameSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackRenameSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackRenameSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackRenameSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackRenameSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackRenameSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackRenameSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackRenameSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackRenameSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackRenameSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackRenameSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackRenameSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackRenameSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackRename(CombinatorialConfigure<PulumiStackRenameSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackRename, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove a stack and its configuration.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackRemoveSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackRemoveSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackRemoveSettings.Emoji"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiStackRemoveSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--preserve-config</c> via <see cref="PulumiStackRemoveSettings.PreserveConfig"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackRemoveSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackRemoveSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackRemoveSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackRemoveSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackRemoveSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackRemoveSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiStackRemoveSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackRemove(PulumiStackRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove a stack and its configuration.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackRemoveSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackRemoveSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackRemoveSettings.Emoji"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiStackRemoveSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--preserve-config</c> via <see cref="PulumiStackRemoveSettings.PreserveConfig"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackRemoveSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackRemoveSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackRemoveSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackRemoveSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackRemoveSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackRemoveSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiStackRemoveSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackRemove(Configure<PulumiStackRemoveSettings> configurator)
        {
            return PulumiStackRemove(configurator(new PulumiStackRemoveSettings()));
        }
        /// <summary>
        ///   <p>Remove a stack and its configuration.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackRemoveSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackRemoveSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackRemoveSettings.Emoji"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiStackRemoveSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--preserve-config</c> via <see cref="PulumiStackRemoveSettings.PreserveConfig"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackRemoveSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackRemoveSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackRemoveSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackRemoveSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackRemoveSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackRemoveSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiStackRemoveSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackRemoveSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackRemove(CombinatorialConfigure<PulumiStackRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackRemove, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Switch the current workspace to the given stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackSelectSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackSelectSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackSelectSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackSelectSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackSelectSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackSelectSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackSelectSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackSelectSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackSelectSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackSelectSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackSelectSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackSelectSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackSelectSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackSelectSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackSelectSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackSelectSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackSelect(PulumiStackSelectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackSelectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Switch the current workspace to the given stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackSelectSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackSelectSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackSelectSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackSelectSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackSelectSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackSelectSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackSelectSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackSelectSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackSelectSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackSelectSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackSelectSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackSelectSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackSelectSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackSelectSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackSelectSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackSelectSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackSelect(Configure<PulumiStackSelectSettings> configurator)
        {
            return PulumiStackSelect(configurator(new PulumiStackSelectSettings()));
        }
        /// <summary>
        ///   <p>Switch the current workspace to the given stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackSelectSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackSelectSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackSelectSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackSelectSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackSelectSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackSelectSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackSelectSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackSelectSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackSelectSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackSelectSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackSelectSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackSelectSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackSelectSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackSelectSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackSelectSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackSelectSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackSelectSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackSelect(CombinatorialConfigure<PulumiStackSelectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackSelect, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Get a single stack tag value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackTagGetSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagGetSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagGetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagGetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagGetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagGetSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagGetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagGetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagGetSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagGetSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagGetSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagGetSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagGetSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagGetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagGetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagGetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackTagGet(PulumiStackTagGetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackTagGetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Get a single stack tag value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackTagGetSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagGetSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagGetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagGetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagGetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagGetSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagGetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagGetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagGetSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagGetSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagGetSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagGetSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagGetSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagGetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagGetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagGetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackTagGet(Configure<PulumiStackTagGetSettings> configurator)
        {
            return PulumiStackTagGet(configurator(new PulumiStackTagGetSettings()));
        }
        /// <summary>
        ///   <p>Get a single stack tag value.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackTagGetSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagGetSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagGetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagGetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagGetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagGetSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagGetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagGetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagGetSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagGetSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagGetSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagGetSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagGetSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagGetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagGetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagGetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackTagGetSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackTagGet(CombinatorialConfigure<PulumiStackTagGetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackTagGet, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List all stack tags.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagListSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagListSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagListSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagListSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagListSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiStackTagListSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagListSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagListSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagListSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagListSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagListSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagListSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagListSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagListSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagListSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackTagList(PulumiStackTagListSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackTagListSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List all stack tags.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagListSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagListSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagListSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagListSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagListSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiStackTagListSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagListSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagListSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagListSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagListSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagListSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagListSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagListSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagListSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagListSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackTagList(Configure<PulumiStackTagListSettings> configurator)
        {
            return PulumiStackTagList(configurator(new PulumiStackTagListSettings()));
        }
        /// <summary>
        ///   <p>List all stack tags.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagListSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagListSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagListSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagListSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagListSettings.Help"/></li>
        ///     <li><c>--json</c> via <see cref="PulumiStackTagListSettings.Json"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagListSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagListSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagListSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagListSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagListSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagListSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagListSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagListSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagListSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagListSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackTagListSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackTagList(CombinatorialConfigure<PulumiStackTagListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackTagList, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove a stack tag.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackTagRemoveSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagRemoveSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagRemoveSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagRemoveSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagRemoveSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagRemoveSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagRemoveSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagRemoveSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackTagRemove(PulumiStackTagRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackTagRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove a stack tag.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackTagRemoveSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagRemoveSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagRemoveSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagRemoveSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagRemoveSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagRemoveSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagRemoveSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagRemoveSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackTagRemove(Configure<PulumiStackTagRemoveSettings> configurator)
        {
            return PulumiStackTagRemove(configurator(new PulumiStackTagRemoveSettings()));
        }
        /// <summary>
        ///   <p>Remove a stack tag.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackTagRemoveSettings.Name"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagRemoveSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagRemoveSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagRemoveSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagRemoveSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagRemoveSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagRemoveSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagRemoveSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagRemoveSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagRemoveSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagRemoveSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagRemoveSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagRemoveSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagRemoveSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagRemoveSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagRemoveSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackTagRemoveSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackTagRemove(CombinatorialConfigure<PulumiStackTagRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackTagRemove, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Set a stack tag.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackTagSetSettings.Name"/></li>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiStackTagSetSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagSetSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagSetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagSetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagSetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagSetSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagSetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagSetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagSetSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagSetSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagSetSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagSetSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagSetSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagSetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagSetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackTagSet(PulumiStackTagSetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStackTagSetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Set a stack tag.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackTagSetSettings.Name"/></li>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiStackTagSetSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagSetSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagSetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagSetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagSetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagSetSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagSetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagSetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagSetSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagSetSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagSetSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagSetSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagSetSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagSetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagSetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStackTagSet(Configure<PulumiStackTagSetSettings> configurator)
        {
            return PulumiStackTagSet(configurator(new PulumiStackTagSetSettings()));
        }
        /// <summary>
        ///   <p>Set a stack tag.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;name&gt;</c> via <see cref="PulumiStackTagSetSettings.Name"/></li>
        ///     <li><c>&lt;value&gt;</c> via <see cref="PulumiStackTagSetSettings.Value"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStackTagSetSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStackTagSetSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStackTagSetSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStackTagSetSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStackTagSetSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStackTagSetSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStackTagSetSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStackTagSetSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStackTagSetSettings.Profiling"/></li>
        ///     <li><c>--show-ids</c> via <see cref="PulumiStackTagSetSettings.ShowIds"/></li>
        ///     <li><c>--show-secrets</c> via <see cref="PulumiStackTagSetSettings.ShowSecrets"/></li>
        ///     <li><c>--show-urns</c> via <see cref="PulumiStackTagSetSettings.ShowUrns"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStackTagSetSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStackTagSetSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStackTagSetSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStackTagSetSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStackTagSet(CombinatorialConfigure<PulumiStackTagSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStackTagSet, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Delete a resource from a stack's state.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;resourceURN&gt;</c> via <see cref="PulumiStateDeleteSettings.ResourceURN"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStateDeleteSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStateDeleteSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStateDeleteSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStateDeleteSettings.Emoji"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiStateDeleteSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStateDeleteSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStateDeleteSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStateDeleteSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStateDeleteSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStateDeleteSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStateDeleteSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStateDeleteSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStateDeleteSettings.Verbose"/></li>
        ///     <li><c>--Yes</c> via <see cref="PulumiStateDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStateDelete(PulumiStateDeleteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStateDeleteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Delete a resource from a stack's state.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;resourceURN&gt;</c> via <see cref="PulumiStateDeleteSettings.ResourceURN"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStateDeleteSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStateDeleteSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStateDeleteSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStateDeleteSettings.Emoji"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiStateDeleteSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStateDeleteSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStateDeleteSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStateDeleteSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStateDeleteSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStateDeleteSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStateDeleteSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStateDeleteSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStateDeleteSettings.Verbose"/></li>
        ///     <li><c>--Yes</c> via <see cref="PulumiStateDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStateDelete(Configure<PulumiStateDeleteSettings> configurator)
        {
            return PulumiStateDelete(configurator(new PulumiStateDeleteSettings()));
        }
        /// <summary>
        ///   <p>Delete a resource from a stack's state.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;resourceURN&gt;</c> via <see cref="PulumiStateDeleteSettings.ResourceURN"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStateDeleteSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStateDeleteSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStateDeleteSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStateDeleteSettings.Emoji"/></li>
        ///     <li><c>--force</c> via <see cref="PulumiStateDeleteSettings.Force"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStateDeleteSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStateDeleteSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStateDeleteSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStateDeleteSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStateDeleteSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStateDeleteSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStateDeleteSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStateDeleteSettings.Verbose"/></li>
        ///     <li><c>--Yes</c> via <see cref="PulumiStateDeleteSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStateDeleteSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStateDelete(CombinatorialConfigure<PulumiStateDeleteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStateDelete, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Unprotect resources in a stack's state.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;resourceURN&gt;</c> via <see cref="PulumiStateUnprotectSettings.ResourceURN"/></li>
        ///     <li><c>--all</c> via <see cref="PulumiStateUnprotectSettings.All"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStateUnprotectSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStateUnprotectSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStateUnprotectSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStateUnprotectSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStateUnprotectSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStateUnprotectSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStateUnprotectSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStateUnprotectSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStateUnprotectSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStateUnprotectSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStateUnprotectSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStateUnprotectSettings.Verbose"/></li>
        ///     <li><c>--Yes</c> via <see cref="PulumiStateUnprotectSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStateUnprotect(PulumiStateUnprotectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiStateUnprotectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Unprotect resources in a stack's state.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;resourceURN&gt;</c> via <see cref="PulumiStateUnprotectSettings.ResourceURN"/></li>
        ///     <li><c>--all</c> via <see cref="PulumiStateUnprotectSettings.All"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStateUnprotectSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStateUnprotectSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStateUnprotectSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStateUnprotectSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStateUnprotectSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStateUnprotectSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStateUnprotectSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStateUnprotectSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStateUnprotectSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStateUnprotectSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStateUnprotectSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStateUnprotectSettings.Verbose"/></li>
        ///     <li><c>--Yes</c> via <see cref="PulumiStateUnprotectSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiStateUnprotect(Configure<PulumiStateUnprotectSettings> configurator)
        {
            return PulumiStateUnprotect(configurator(new PulumiStateUnprotectSettings()));
        }
        /// <summary>
        ///   <p>Unprotect resources in a stack's state.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;resourceURN&gt;</c> via <see cref="PulumiStateUnprotectSettings.ResourceURN"/></li>
        ///     <li><c>--all</c> via <see cref="PulumiStateUnprotectSettings.All"/></li>
        ///     <li><c>--color</c> via <see cref="PulumiStateUnprotectSettings.Color"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiStateUnprotectSettings.WorkingDirectory"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiStateUnprotectSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiStateUnprotectSettings.Emoji"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiStateUnprotectSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiStateUnprotectSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiStateUnprotectSettings.LogToStderr"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiStateUnprotectSettings.NonInteractive"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiStateUnprotectSettings.Profiling"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiStateUnprotectSettings.Stack"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiStateUnprotectSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiStateUnprotectSettings.Verbose"/></li>
        ///     <li><c>--Yes</c> via <see cref="PulumiStateUnprotectSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiStateUnprotectSettings Settings, IReadOnlyCollection<Output> Output)> PulumiStateUnprotect(CombinatorialConfigure<PulumiStateUnprotectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiStateUnprotect, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create or update the resources in a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiUpSettings.Color"/></li>
        ///     <li><c>--config</c> via <see cref="PulumiUpSettings.Config"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiUpSettings.ConfigFile"/></li>
        ///     <li><c>--config-path</c> via <see cref="PulumiUpSettings.ConfigPath"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiUpSettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiUpSettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiUpSettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiUpSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiUpSettings.Emoji"/></li>
        ///     <li><c>--expect-no-changes</c> via <see cref="PulumiUpSettings.ExpectNoChanges"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiUpSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiUpSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiUpSettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiUpSettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiUpSettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiUpSettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiUpSettings.Profiling"/></li>
        ///     <li><c>--refresh</c> via <see cref="PulumiUpSettings.Refresh"/></li>
        ///     <li><c>--replace</c> via <see cref="PulumiUpSettings.Replace"/></li>
        ///     <li><c>--secrets-provider</c> via <see cref="PulumiUpSettings.SecretsProvider"/></li>
        ///     <li><c>--show-config</c> via <see cref="PulumiUpSettings.ShowConfig"/></li>
        ///     <li><c>--show-reads</c> via <see cref="PulumiUpSettings.ShowReads"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiUpSettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiUpSettings.ShowSames"/></li>
        ///     <li><c>--skip-preview</c> via <see cref="PulumiUpSettings.SkipPreview"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiUpSettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiUpSettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiUpSettings.Target"/></li>
        ///     <li><c>--target-dependents</c> via <see cref="PulumiUpSettings.TargetDependents"/></li>
        ///     <li><c>--target-replace</c> via <see cref="PulumiUpSettings.TargetReplace"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiUpSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiUpSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiUpSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiUp(PulumiUpSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new PulumiUpSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create or update the resources in a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiUpSettings.Color"/></li>
        ///     <li><c>--config</c> via <see cref="PulumiUpSettings.Config"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiUpSettings.ConfigFile"/></li>
        ///     <li><c>--config-path</c> via <see cref="PulumiUpSettings.ConfigPath"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiUpSettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiUpSettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiUpSettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiUpSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiUpSettings.Emoji"/></li>
        ///     <li><c>--expect-no-changes</c> via <see cref="PulumiUpSettings.ExpectNoChanges"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiUpSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiUpSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiUpSettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiUpSettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiUpSettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiUpSettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiUpSettings.Profiling"/></li>
        ///     <li><c>--refresh</c> via <see cref="PulumiUpSettings.Refresh"/></li>
        ///     <li><c>--replace</c> via <see cref="PulumiUpSettings.Replace"/></li>
        ///     <li><c>--secrets-provider</c> via <see cref="PulumiUpSettings.SecretsProvider"/></li>
        ///     <li><c>--show-config</c> via <see cref="PulumiUpSettings.ShowConfig"/></li>
        ///     <li><c>--show-reads</c> via <see cref="PulumiUpSettings.ShowReads"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiUpSettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiUpSettings.ShowSames"/></li>
        ///     <li><c>--skip-preview</c> via <see cref="PulumiUpSettings.SkipPreview"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiUpSettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiUpSettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiUpSettings.Target"/></li>
        ///     <li><c>--target-dependents</c> via <see cref="PulumiUpSettings.TargetDependents"/></li>
        ///     <li><c>--target-replace</c> via <see cref="PulumiUpSettings.TargetReplace"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiUpSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiUpSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiUpSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> PulumiUp(Configure<PulumiUpSettings> configurator)
        {
            return PulumiUp(configurator(new PulumiUpSettings()));
        }
        /// <summary>
        ///   <p>Create or update the resources in a stack.</p>
        ///   <p>For more details, visit the <a href="https://www.pulumi.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>--color</c> via <see cref="PulumiUpSettings.Color"/></li>
        ///     <li><c>--config</c> via <see cref="PulumiUpSettings.Config"/></li>
        ///     <li><c>--config-file</c> via <see cref="PulumiUpSettings.ConfigFile"/></li>
        ///     <li><c>--config-path</c> via <see cref="PulumiUpSettings.ConfigPath"/></li>
        ///     <li><c>--cwd</c> via <see cref="PulumiUpSettings.WorkingDirectory"/></li>
        ///     <li><c>--debug</c> via <see cref="PulumiUpSettings.Debug"/></li>
        ///     <li><c>--diff</c> via <see cref="PulumiUpSettings.Diff"/></li>
        ///     <li><c>--disable-integrity-checking</c> via <see cref="PulumiUpSettings.DisableIntegrityChecking"/></li>
        ///     <li><c>--emoji</c> via <see cref="PulumiUpSettings.Emoji"/></li>
        ///     <li><c>--expect-no-changes</c> via <see cref="PulumiUpSettings.ExpectNoChanges"/></li>
        ///     <li><c>--help</c> via <see cref="PulumiUpSettings.Help"/></li>
        ///     <li><c>--logflow</c> via <see cref="PulumiUpSettings.LogFlow"/></li>
        ///     <li><c>--logtostderr</c> via <see cref="PulumiUpSettings.LogToStderr"/></li>
        ///     <li><c>--message</c> via <see cref="PulumiUpSettings.Message"/></li>
        ///     <li><c>--non-interactive</c> via <see cref="PulumiUpSettings.NonInteractive"/></li>
        ///     <li><c>--parallel</c> via <see cref="PulumiUpSettings.Parallel"/></li>
        ///     <li><c>--profiling</c> via <see cref="PulumiUpSettings.Profiling"/></li>
        ///     <li><c>--refresh</c> via <see cref="PulumiUpSettings.Refresh"/></li>
        ///     <li><c>--replace</c> via <see cref="PulumiUpSettings.Replace"/></li>
        ///     <li><c>--secrets-provider</c> via <see cref="PulumiUpSettings.SecretsProvider"/></li>
        ///     <li><c>--show-config</c> via <see cref="PulumiUpSettings.ShowConfig"/></li>
        ///     <li><c>--show-reads</c> via <see cref="PulumiUpSettings.ShowReads"/></li>
        ///     <li><c>--show-replacement-steps</c> via <see cref="PulumiUpSettings.ShowReplacementSteps"/></li>
        ///     <li><c>--show-sames</c> via <see cref="PulumiUpSettings.ShowSames"/></li>
        ///     <li><c>--skip-preview</c> via <see cref="PulumiUpSettings.SkipPreview"/></li>
        ///     <li><c>--stack</c> via <see cref="PulumiUpSettings.Stack"/></li>
        ///     <li><c>--suppress-outputs</c> via <see cref="PulumiUpSettings.SuppressOutputs"/></li>
        ///     <li><c>--target</c> via <see cref="PulumiUpSettings.Target"/></li>
        ///     <li><c>--target-dependents</c> via <see cref="PulumiUpSettings.TargetDependents"/></li>
        ///     <li><c>--target-replace</c> via <see cref="PulumiUpSettings.TargetReplace"/></li>
        ///     <li><c>--tracing</c> via <see cref="PulumiUpSettings.Tracing"/></li>
        ///     <li><c>--verbose</c> via <see cref="PulumiUpSettings.Verbose"/></li>
        ///     <li><c>--yes</c> via <see cref="PulumiUpSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(PulumiUpSettings Settings, IReadOnlyCollection<Output> Output)> PulumiUp(CombinatorialConfigure<PulumiUpSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(PulumiUp, PulumiLogger, degreeOfParallelism, completeOnFailure);
        }
    }
    #region PulumiCancelSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiCancelSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack.
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Skip confirmation prompts, and proceed with cancellation anyway.
        /// </summary>
        public virtual bool? Yes { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("cancel")
              .Add("{value}", Stack)
              .Add("--yes", Yes)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiConfigSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiConfigSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///    Emit output as JSON.
        /// </summary>
        public virtual bool? Json { get; internal set; }
        /// <summary>
        ///   Show secret values when listing config instead of displaying blinded values.
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config")
              .Add("--json", Json)
              .Add("--show-secrets", ShowSecrets)
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiConfigGetSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiConfigGetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The configuration value to get.
        /// </summary>
        public virtual string Value { get; internal set; }
        /// <summary>
        ///   Emit output as JSON.
        /// </summary>
        public virtual bool? Json { get; internal set; }
        /// <summary>
        ///   The key contains a path to a property in a map or list to get.
        /// </summary>
        public virtual string Path { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config get")
              .Add("{value}", Value)
              .Add("--json", Json)
              .Add("--path {value}", Path)
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiConfigRefreshSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiConfigRefreshSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Overwrite configuration file, if it exists, without creating a backup.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config refresh")
              .Add("--force", Force)
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiConfigRemoveSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiConfigRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The configuration value to remove.
        /// </summary>
        public virtual string Value { get; internal set; }
        /// <summary>
        ///   The key contains a path to a property in a map or list to remove.
        /// </summary>
        public virtual string Path { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config rm")
              .Add("{value}", Value)
              .Add("--path {value}", Path)
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiConfigSetSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiConfigSetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The configuration value to set.
        /// </summary>
        public virtual string Value { get; internal set; }
        /// <summary>
        ///   The key contains a path to a property in a map or list to set.
        /// </summary>
        public virtual string Path { get; internal set; }
        /// <summary>
        ///   Save the value as plaintext (unencrypted).
        /// </summary>
        public virtual bool? Plaintext { get; internal set; }
        /// <summary>
        ///   Encrypt the value instead of storing it in plaintext.
        /// </summary>
        public virtual bool? Secret { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config rm")
              .Add("{value}", Value)
              .Add("--path {value}", Path)
              .Add("--plaintext", Plaintext)
              .Add("--secret", Secret)
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiDestroySettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiDestroySettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Print detailed debugging output during resource operations.
        /// </summary>
        public virtual bool? Debug { get; internal set; }
        /// <summary>
        ///   Display operation as a rich diff showing the overall change.
        /// </summary>
        public virtual bool? Diff { get; internal set; }
        /// <summary>
        ///   Optional message to associate with the destroy operation.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).
        /// </summary>
        public virtual int? Parallel { get; internal set; }
        /// <summary>
        ///   Refresh the state of the stack's resources before this update.
        /// </summary>
        public virtual bool? Refresh { get; internal set; }
        /// <summary>
        ///   Show configuration keys and variables.
        /// </summary>
        public virtual bool? ShowConfig { get; internal set; }
        /// <summary>
        ///   Show detailed resource replacement creates and deletes instead of a single step.
        /// </summary>
        public virtual bool? ShowReplacementSteps { get; internal set; }
        /// <summary>
        ///   Show resources that don't need to be updated because they haven't changed, alongside those that do.
        /// </summary>
        public virtual bool? ShowSames { get; internal set; }
        /// <summary>
        ///   Do not perform a preview before performing the destroy.
        /// </summary>
        public virtual bool? SkipPreview { get; internal set; }
        /// <summary>
        ///   Suppress display of stack outputs (in case they contain sensitive values).
        /// </summary>
        public virtual bool? SuppressOutputs { get; internal set; }
        /// <summary>
        ///   Specify a single resource URN to destroy. All resources necessary to destroy this target will also be destroyed. Multiple resources can be specified using: --target urn1 --target urn2.
        /// </summary>
        public virtual string Target { get; internal set; }
        /// <summary>
        ///   Allows destroying of dependent targets discovered but not specified in --target list.
        /// </summary>
        public virtual bool? TargetDependents { get; internal set; }
        /// <summary>
        ///   Automatically approve and perform the destroy after previewing it.
        /// </summary>
        public virtual bool? Yes { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("destroy")
              .Add("--debug", Debug)
              .Add("--diff", Diff)
              .Add("--message {value}", Message)
              .Add("--parallel {value}", Parallel)
              .Add("--refresh", Refresh)
              .Add("--show-config", ShowConfig)
              .Add("--show-replacement-steps", ShowReplacementSteps)
              .Add("--show-sames", ShowSames)
              .Add("--skip-preview", SkipPreview)
              .Add("--suppress-outputs", SuppressOutputs)
              .Add("--target {value}", Target)
              .Add("--target-dependents {value}", TargetDependents)
              .Add("--yes", Yes)
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiHistorySettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiHistorySettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Emit output as JSON.
        /// </summary>
        public virtual bool? Json { get; internal set; }
        /// <summary>
        ///   Show secret values when listing config instead of displaying blinded values.
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("history")
              .Add("--json", Json)
              .Add("--show-secrets", ShowSecrets)
              .Add("--stack {value}", Stack)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiLoginSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiLoginSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Specify a URL or a local/cloud path to the Pulumi instance you wish to use. Defaults to app.pulumi.com.
        /// </summary>
        public virtual string Location { get; internal set; }
        /// <summary>
        ///   A cloud URL to log into. This is the same as specifying a location.
        /// </summary>
        public virtual string CloudUrl { get; internal set; }
        /// <summary>
        ///   Use Pulumi in local-only mode.
        /// </summary>
        public virtual bool? Local { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("login")
              .Add("{value}", Location)
              .Add("--cloud-url {value}", CloudUrl)
              .Add("--local", Local)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiLogoutSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiLogoutSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Specify a URL or a local/cloud path to the Pulumi instance you wish to logout from. If no URL is provided, you will be logged out of the current backend.
        /// </summary>
        public virtual string Location { get; internal set; }
        /// <summary>
        ///    A cloud URL to log out of (defaults to current cloud). This is the same as specifying a location.
        /// </summary>
        public virtual string CloudUrl { get; internal set; }
        /// <summary>
        ///   Log out of using local mode.
        /// </summary>
        public virtual bool? Local { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("logout")
              .Add("{value}", Location)
              .Add("--cloud-url {value}", CloudUrl)
              .Add("--local", Local)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiLogsSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiLogsSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Follow the log stream in real time (like tail -f).
        /// </summary>
        public virtual bool? Follow { get; internal set; }
        /// <summary>
        ///   Emit output as JSON.
        /// </summary>
        public virtual bool? Json { get; internal set; }
        /// <summary>
        ///   Only return logs for the requested resource ('name', 'type::name' or full URN).  Defaults to returning all logs.
        /// </summary>
        public virtual string Resource { get; internal set; }
        /// <summary>
        ///   Only return logs newer than a relative duration ('5s', '2m', '3h') or absolute timestamp.  Defaults to returning the last 1 hour of logs. (default 1h).
        /// </summary>
        public virtual string Since { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("logs")
              .Add("--follow", Follow)
              .Add("--json", Json)
              .Add("--resource {value}", Resource)
              .Add("--since {value}", Since)
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiPluginInstallSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiPluginInstallSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Installation may be run either with a specific KIND, NAME, and VERSION, or by omitting these and letting Pulumi compute the set of plugins that may be required by the current project. VERSION cannot be a range: it must be a specific number.
        /// </summary>
        public virtual string KindNameVersion { get; internal set; }
        /// <summary>
        ///   Force installation of an exact version match (usually >= is accepted).
        /// </summary>
        public virtual bool? Exact { get; internal set; }
        /// <summary>
        ///   Install a plugin from a tarball file, instead of downloading it.
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   Reinstall a plugin even if it already exists.
        /// </summary>
        public virtual bool? Reinstall { get; internal set; }
        /// <summary>
        ///   A URL to download plugins from.
        /// </summary>
        public virtual string Server { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin install")
              .Add("{value}", KindNameVersion)
              .Add("--exact", Exact)
              .Add("--file {value}", File)
              .Add("--reinstall", Reinstall)
              .Add("--server {value}", Server)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiPluginListSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiPluginListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Emit output as JSON.
        /// </summary>
        public virtual bool? Json { get; internal set; }
        /// <summary>
        ///   List only the plugins used by the current project.
        /// </summary>
        public virtual bool? Project { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin ls")
              .Add("--json", Json)
              .Add("--project", Project)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiPluginRemoveSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiPluginRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Specify KIND, NAME, and/or VERSION to narrow down what will be removed. If none are specified, the entire cache will be cleared. If only KIND and NAME are specified, but not VERSION, all versions of the plugin with the given KIND and NAME will be removed. VERSION may be a range.
        /// </summary>
        public virtual string KindNameVersion { get; internal set; }
        /// <summary>
        ///   Remove all plugins.
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Skip confirmation prompts, and proceed with removal anyway.
        /// </summary>
        public virtual bool? Yes { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin rm")
              .Add("{value}", KindNameVersion)
              .Add("--all", All)
              .Add("--yes", Yes)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiPreviewSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiPreviewSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Config to use during the preview.
        /// </summary>
        public virtual IReadOnlyList<string> Config => ConfigInternal.AsReadOnly();
        internal List<string> ConfigInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Config keys contain a path to a property in a map or list to set.
        /// </summary>
        public virtual bool? ConfigPath { get; internal set; }
        /// <summary>
        ///   Print detailed debugging output during resource operations.
        /// </summary>
        public virtual bool? Debug { get; internal set; }
        /// <summary>
        ///   Display operation as a rich diff showing the overall change.
        /// </summary>
        public virtual bool? Diff { get; internal set; }
        /// <summary>
        ///   Return an error if any changes are proposed by this preview.
        /// </summary>
        public virtual bool? ExpectNoChanges { get; internal set; }
        /// <summary>
        ///   Serialize the preview diffs, operations, and overall output as JSON.
        /// </summary>
        public virtual bool? Json { get; internal set; }
        /// <summary>
        ///   Optional message to associate with the preview operation.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).
        /// </summary>
        public virtual int? Parallel { get; internal set; }
        /// <summary>
        ///   Refresh the state of the stack's resources before this update.
        /// </summary>
        public virtual bool? Refresh { get; internal set; }
        /// <summary>
        ///   Refresh the state of the stack's resources before this update.
        /// </summary>
        public virtual IReadOnlyList<string> Replace => ReplaceInternal.AsReadOnly();
        internal List<string> ReplaceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Show configuration keys and variables.
        /// </summary>
        public virtual bool? ShowConfig { get; internal set; }
        /// <summary>
        ///   Show detailed resource replacement creates and deletes instead of a single step.
        /// </summary>
        public virtual bool? ShowReplacementSteps { get; internal set; }
        /// <summary>
        ///   Show resources that don't need to be updated because they haven't changed, alongside those that do.
        /// </summary>
        public virtual bool? ShowSames { get; internal set; }
        /// <summary>
        ///   Suppress display of stack outputs (in case they contain sensitive values).
        /// </summary>
        public virtual bool? SuppressOutputs { get; internal set; }
        /// <summary>
        ///   Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.
        /// </summary>
        public virtual IReadOnlyList<string> Target => TargetInternal.AsReadOnly();
        internal List<string> TargetInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Allows updating of dependent targets discovered but not specified in --target list.
        /// </summary>
        public virtual bool? TargetDependents { get; internal set; }
        /// <summary>
        ///   Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.
        /// </summary>
        public virtual IReadOnlyList<string> TargetReplace => TargetReplaceInternal.AsReadOnly();
        internal List<string> TargetReplaceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("preview")
              .Add("--config {value}", Config, separator: ',')
              .Add("--config-path", ConfigPath)
              .Add("--debug", Debug)
              .Add("--diff", Diff)
              .Add("--expect-no-changes", ExpectNoChanges)
              .Add("--json", Json)
              .Add("--message {value}", Message)
              .Add("--parallel {value}", Parallel)
              .Add("--refresh", Refresh)
              .Add("--replace {value}", Replace, separator: ',')
              .Add("--show-config", ShowConfig)
              .Add("--show-replacement-steps", ShowReplacementSteps)
              .Add("--show-sames", ShowSames)
              .Add("--suppress-outputs", SuppressOutputs)
              .Add("--target {value}", Target, separator: ',')
              .Add("--target-dependents {value}", TargetDependents)
              .Add("--target-replace {value}", TargetReplace, separator: ',')
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiRefreshSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiRefreshSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Print detailed debugging output during resource operations.
        /// </summary>
        public virtual bool? Debug { get; internal set; }
        /// <summary>
        ///   Display operation as a rich diff showing the overall change.
        /// </summary>
        public virtual bool? Diff { get; internal set; }
        /// <summary>
        ///   Return an error if any changes occur during this update.
        /// </summary>
        public virtual bool? ExpectNoChanges { get; internal set; }
        /// <summary>
        ///   Optional message to associate with the update operation.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).
        /// </summary>
        public virtual int? Parallel { get; internal set; }
        /// <summary>
        ///   Show detailed resource replacement creates and deletes instead of a single step.
        /// </summary>
        public virtual bool? ShowReplacementSteps { get; internal set; }
        /// <summary>
        ///   Show resources that don't need to be updated because they haven't changed, alongside those that do.
        /// </summary>
        public virtual bool? ShowSames { get; internal set; }
        /// <summary>
        ///   Suppress display of stack outputs (in case they contain sensitive values).
        /// </summary>
        public virtual bool? SuppressOutputs { get; internal set; }
        /// <summary>
        ///   Specify a single resource URN to refresh. Multiple resources can be specified using --target urn1 --target urn2.
        /// </summary>
        public virtual IReadOnlyList<string> Target => TargetInternal.AsReadOnly();
        internal List<string> TargetInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Automatically approve and perform the refresh after previewing it.
        /// </summary>
        public virtual bool? Yes { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("refresh")
              .Add("--debug", Debug)
              .Add("--diff", Diff)
              .Add("--expect-no-changes", ExpectNoChanges)
              .Add("--message {value}", Message)
              .Add("--parallel {value}", Parallel)
              .Add("--show-replacement-steps", ShowReplacementSteps)
              .Add("--show-sames", ShowSames)
              .Add("--suppress-outputs", SuppressOutputs)
              .Add("--target {value}", Target, separator: ',')
              .Add("--yes", Yes)
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack")
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackExportSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackExportSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   A filename to write stack output to.
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack export")
              .Add("--file {value}", File)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackGraphSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackGraphSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The file to export to.
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   Sets the color of dependency edges in the graph (default <c>#246C60</c>).
        /// </summary>
        public virtual string DependencyEdgeColor { get; internal set; }
        /// <summary>
        ///   Ignores edges introduced by dependency resource relationships.
        /// </summary>
        public virtual bool? IgnoreDependencyEdges { get; internal set; }
        /// <summary>
        ///   Ignores edges introduced by parent/child resource relationships.
        /// </summary>
        public virtual bool? IgnoreParentEdges { get; internal set; }
        /// <summary>
        ///   Sets the color of dependency edges in the graph (default <c>#AA6639</c>).
        /// </summary>
        public virtual string ParentEdgeColor { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack graph")
              .Add("{value}", File)
              .Add("--dependency-edge-color {value}", DependencyEdgeColor)
              .Add("--ignore-dependency-edges", IgnoreDependencyEdges)
              .Add("--ignore-dependency-edges", IgnoreParentEdges)
              .Add("--parent-edge-color {value}", ParentEdgeColor)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackImportSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackImportSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   A filename to read stack input from.
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   Force the import to occur, even if apparent errors are discovered beforehand (not recommended).
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack export")
              .Add("--file {value}", File)
              .Add("--force", Force)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackInitSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackInitSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The name of the stack to create. Include org name if required.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault) (default: default).
        /// </summary>
        public virtual string SecretsProvider { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack init")
              .Add("{value}", Name)
              .Add("--secrets-provider {value}", SecretsProvider)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackListSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   List all stacks instead of just stacks for the current project.
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Emit output as JSON.
        /// </summary>
        public virtual bool? Json { get; internal set; }
        /// <summary>
        ///   Filter returned stacks to those in a specific organization.
        /// </summary>
        public virtual string Organization { get; internal set; }
        /// <summary>
        ///   Filter returned stacks to those with a specific project name.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Filter returned stacks to those in a specific tag (tag-name or tag-name=tag-value).
        /// </summary>
        public virtual string Tag { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack ls")
              .Add("--all", All)
              .Add("--json", Json)
              .Add("--organization {value}", Organization)
              .Add("--project {value}", Project)
              .Add("--tag {value}", Tag)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackOutputSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackOutputSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Show output of a specific property.
        /// </summary>
        public virtual string PropertyName { get; internal set; }
        /// <summary>
        ///   Emit output as JSON.
        /// </summary>
        public virtual bool? Json { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack output")
              .Add("{value}", PropertyName)
              .Add("--json", Json)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackRenameSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackRenameSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The name of the new stack.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack rename")
              .Add("{value}", Name)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackRemoveSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The name of the stack to remove.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Forces deletion of the stack, leaving behind any resources managed by the stack.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   Do not delete the corresponding Pulumi.<stack-name>.yaml configuration file for the stack.
        /// </summary>
        public virtual bool? PreserveConfig { get; internal set; }
        /// <summary>
        ///   Skip confirmation prompts, and proceed with removal anyway.
        /// </summary>
        public virtual bool? Yes { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack rm")
              .Add("{value}", Name)
              .Add("--force", Force)
              .Add("--preserve-config", PreserveConfig)
              .Add("--yes", Yes)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackSelectSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackSelectSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The name of the new stack.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack select")
              .Add("{value}", Name)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackTagGetSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackTagGetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The name of the tag.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack tag get")
              .Add("{value}", Name)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackTagListSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackTagListSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Emit output as JSON.
        /// </summary>
        public virtual bool? Json { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack tag ls")
              .Add("--json", Json)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackTagRemoveSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackTagRemoveSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The name of the tag.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack tag rm")
              .Add("{value}", Name)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStackTagSetSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStackTagSetSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The name of the tag.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The value of the tag.
        /// </summary>
        public virtual string Value { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Display each resource's provider-assigned unique ID
        /// </summary>
        public virtual bool? ShowIds { get; internal set; }
        /// <summary>
        ///   Display stack outputs which are marked as secret in plaintext
        /// </summary>
        public virtual bool? ShowSecrets { get; internal set; }
        /// <summary>
        ///   Display each resource's Pulumi-assigned globally unique URN
        /// </summary>
        public virtual bool? ShowUrns { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack tag set")
              .Add("{value}", Name)
              .Add("{value}", Value)
              .Add("--stack {value}", Stack)
              .Add("--show-ids", ShowIds)
              .Add("--show-secrets", ShowSecrets)
              .Add("--show-urns", ShowUrns)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStateDeleteSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStateDeleteSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The resource as specified by its Pulumi URN (use <c>pulumi stack �show-urns</c> to get it).
        /// </summary>
        public virtual string ResourceURN { get; internal set; }
        /// <summary>
        ///   Force deletion of protected resources.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   Skip confirmation prompts.
        /// </summary>
        public virtual bool? Yes { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("state delete")
              .Add("{value}", ResourceURN)
              .Add("--force", Force)
              .Add("--Yes", Yes)
              .Add("--stack {value}", Stack)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiStateUnprotectSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiStateUnprotectSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   The resource as specified by its Pulumi URN (use <c>pulumi stack �show-urns</c> to get it).
        /// </summary>
        public virtual string ResourceURN { get; internal set; }
        /// <summary>
        ///   Unprotect all resources in the checkpoint.
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Skip confirmation prompts.
        /// </summary>
        public virtual bool? Yes { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("state unprotect")
              .Add("{value}", ResourceURN)
              .Add("--all", All)
              .Add("--Yes", Yes)
              .Add("--stack {value}", Stack)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiUpSettings
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class PulumiUpSettings : ToolSettings
    {
        /// <summary>
        ///   Path to the Pulumi executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? PulumiTasks.PulumiPath;
        public override Action<OutputType, string> CustomLogger => PulumiTasks.PulumiLogger;
        /// <summary>
        ///   Config to use during the update.
        /// </summary>
        public virtual IReadOnlyList<string> Config => ConfigInternal.AsReadOnly();
        internal List<string> ConfigInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Config keys contain a path to a property in a map or list to set.
        /// </summary>
        public virtual bool? ConfigPath { get; internal set; }
        /// <summary>
        ///   Print detailed debugging output during resource operations.
        /// </summary>
        public virtual bool? Debug { get; internal set; }
        /// <summary>
        ///   Display operation as a rich diff showing the overall change.
        /// </summary>
        public virtual bool? Diff { get; internal set; }
        /// <summary>
        ///   Return an error if any changes are proposed by this update.
        /// </summary>
        public virtual bool? ExpectNoChanges { get; internal set; }
        /// <summary>
        ///   Optional message to associate with the update operation.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).
        /// </summary>
        public virtual int? Parallel { get; internal set; }
        /// <summary>
        ///   Refresh the state of the stack's resources before this update.
        /// </summary>
        public virtual bool? Refresh { get; internal set; }
        /// <summary>
        ///   Refresh the state of the stack's resources before this update.
        /// </summary>
        public virtual IReadOnlyList<string> Replace => ReplaceInternal.AsReadOnly();
        internal List<string> ReplaceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault). Only used when creating a new stack from an existing template (default: default).
        /// </summary>
        public virtual string SecretsProvider { get; internal set; }
        /// <summary>
        ///   Show configuration keys and variables.
        /// </summary>
        public virtual bool? ShowConfig { get; internal set; }
        /// <summary>
        ///   Show resources that are being read in, alongside those being managed directly in the stack.
        /// </summary>
        public virtual bool? ShowReads { get; internal set; }
        /// <summary>
        ///   Show detailed resource replacement creates and deletes instead of a single step.
        /// </summary>
        public virtual bool? ShowReplacementSteps { get; internal set; }
        /// <summary>
        ///   Show resources that don't need to be updated because they haven't changed, alongside those that do.
        /// </summary>
        public virtual bool? ShowSames { get; internal set; }
        /// <summary>
        ///   Do not perform a preview before performing the update.
        /// </summary>
        public virtual bool? SkipPreview { get; internal set; }
        /// <summary>
        ///   Suppress display of stack outputs (in case they contain sensitive values).
        /// </summary>
        public virtual bool? SuppressOutputs { get; internal set; }
        /// <summary>
        ///   Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.
        /// </summary>
        public virtual IReadOnlyList<string> Target => TargetInternal.AsReadOnly();
        internal List<string> TargetInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Allows updating of dependent targets discovered but not specified in --target list.
        /// </summary>
        public virtual bool? TargetDependents { get; internal set; }
        /// <summary>
        ///   Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.
        /// </summary>
        public virtual IReadOnlyList<string> TargetReplace => TargetReplaceInternal.AsReadOnly();
        internal List<string> TargetReplaceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Automatically approve and perform the update after previewing it.
        /// </summary>
        public virtual bool? Yes { get; internal set; }
        /// <summary>
        ///   The name of the stack to operate on. Defaults to the current stack
        /// </summary>
        public virtual string Stack { get; internal set; }
        /// <summary>
        ///   Use the configuration values in the specified file rather than detecting the file name
        /// </summary>
        public virtual string ConfigFile { get; internal set; }
        /// <summary>
        ///   Colorize output. Choices are: always, never, raw, auto (default is auto)
        /// </summary>
        public virtual ColorizeOutput Color { get; internal set; }
        /// <summary>
        ///   Run pulumi as if it had been started in another directory
        /// </summary>
        public virtual string WorkingDirectory { get; internal set; }
        /// <summary>
        ///   Disable integrity checking of checkpoint files
        /// </summary>
        public virtual bool? DisableIntegrityChecking { get; internal set; }
        /// <summary>
        ///   Enable emojis in the output (default is true)
        /// </summary>
        public virtual bool? Emoji { get; internal set; }
        /// <summary>
        ///   Help for Pulumi
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Flow log settings to child processes (like plugins)
        /// </summary>
        public virtual bool? LogFlow { get; internal set; }
        /// <summary>
        ///   Log to stderr instead of to files
        /// </summary>
        public virtual bool? LogToStderr { get; internal set; }
        /// <summary>
        ///   Disable interactive mode for all commands
        /// </summary>
        public virtual bool? NonInteractive { get; internal set; }
        /// <summary>
        ///   Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively
        /// </summary>
        public virtual string Profiling { get; internal set; }
        /// <summary>
        ///   Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file
        /// </summary>
        public virtual string Tracing { get; internal set; }
        /// <summary>
        ///   Enable verbose logging (e.g., v=3); anything >3 is very verbose
        /// </summary>
        public virtual int? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("up")
              .Add("--config {value}", Config, separator: ',')
              .Add("--config-path", ConfigPath)
              .Add("--debug", Debug)
              .Add("--diff", Diff)
              .Add("--expect-no-changes", ExpectNoChanges)
              .Add("--message {value}", Message)
              .Add("--parallel {value}", Parallel)
              .Add("--refresh", Refresh)
              .Add("--replace {value}", Replace, separator: ',')
              .Add("--secrets-provider {value}", SecretsProvider)
              .Add("--show-config", ShowConfig)
              .Add("--show-reads", ShowReads)
              .Add("--show-replacement-steps", ShowReplacementSteps)
              .Add("--show-sames", ShowSames)
              .Add("--skip-preview", SkipPreview)
              .Add("--suppress-outputs", SuppressOutputs)
              .Add("--target {value}", Target, separator: ',')
              .Add("--target-dependents {value}", TargetDependents)
              .Add("--target-replace {value}", TargetReplace, separator: ',')
              .Add("--yes", Yes)
              .Add("--stack {value}", Stack)
              .Add("--config-file {value}", ConfigFile)
              .Add("--color {value}", Color)
              .Add("--cwd {value}", WorkingDirectory)
              .Add("--disable-integrity-checking", DisableIntegrityChecking)
              .Add("--emoji", Emoji)
              .Add("--help", Help)
              .Add("--logflow", LogFlow)
              .Add("--logtostderr", LogToStderr)
              .Add("--non-interactive", NonInteractive)
              .Add("--profiling {value}", Profiling)
              .Add("--tracing {value}", Tracing)
              .Add("--verbose {value}", Verbose);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region PulumiCancelSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiCancelSettingsExtensions
    {
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack.</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetStack(this PulumiCancelSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack.</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetStack(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with cancellation anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetYes(this PulumiCancelSettings toolSettings, bool? yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with cancellation anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetYes(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiCancelSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with cancellation anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings EnableYes(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiCancelSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with cancellation anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings DisableYes(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiCancelSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with cancellation anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ToggleYes(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = !toolSettings.Yes;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetColor(this PulumiCancelSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetColor(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetWorkingDirectory(this PulumiCancelSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetWorkingDirectory(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetDisableIntegrityChecking(this PulumiCancelSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetDisableIntegrityChecking(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiCancelSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings EnableDisableIntegrityChecking(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiCancelSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings DisableDisableIntegrityChecking(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiCancelSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ToggleDisableIntegrityChecking(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetEmoji(this PulumiCancelSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetEmoji(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiCancelSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings EnableEmoji(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiCancelSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings DisableEmoji(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiCancelSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ToggleEmoji(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetHelp(this PulumiCancelSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetHelp(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiCancelSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings EnableHelp(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiCancelSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings DisableHelp(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiCancelSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ToggleHelp(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetLogFlow(this PulumiCancelSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetLogFlow(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiCancelSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings EnableLogFlow(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiCancelSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings DisableLogFlow(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiCancelSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ToggleLogFlow(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetLogToStderr(this PulumiCancelSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetLogToStderr(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiCancelSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings EnableLogToStderr(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiCancelSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings DisableLogToStderr(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiCancelSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ToggleLogToStderr(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetNonInteractive(this PulumiCancelSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetNonInteractive(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiCancelSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings EnableNonInteractive(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiCancelSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings DisableNonInteractive(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiCancelSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ToggleNonInteractive(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetProfiling(this PulumiCancelSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetProfiling(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetTracing(this PulumiCancelSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetTracing(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiCancelSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings SetVerbose(this PulumiCancelSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiCancelSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiCancelSettings ResetVerbose(this PulumiCancelSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiConfigSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiConfigSettingsExtensions
    {
        #region Json
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.Json"/></em></p>
        ///   <p> Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetJson(this PulumiConfigSettings toolSettings, bool? json)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = json;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.Json"/></em></p>
        ///   <p> Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetJson(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSettings.Json"/></em></p>
        ///   <p> Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings EnableJson(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSettings.Json"/></em></p>
        ///   <p> Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings DisableJson(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSettings.Json"/></em></p>
        ///   <p> Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ToggleJson(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = !toolSettings.Json;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetShowSecrets(this PulumiConfigSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetShowSecrets(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings EnableShowSecrets(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings DisableShowSecrets(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ToggleShowSecrets(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetStack(this PulumiConfigSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetStack(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetConfigFile(this PulumiConfigSettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetConfigFile(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetColor(this PulumiConfigSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetColor(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetWorkingDirectory(this PulumiConfigSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetWorkingDirectory(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetDisableIntegrityChecking(this PulumiConfigSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetDisableIntegrityChecking(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings EnableDisableIntegrityChecking(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings DisableDisableIntegrityChecking(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ToggleDisableIntegrityChecking(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetEmoji(this PulumiConfigSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetEmoji(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings EnableEmoji(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings DisableEmoji(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ToggleEmoji(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetHelp(this PulumiConfigSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetHelp(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings EnableHelp(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings DisableHelp(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ToggleHelp(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetLogFlow(this PulumiConfigSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetLogFlow(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings EnableLogFlow(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings DisableLogFlow(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ToggleLogFlow(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetLogToStderr(this PulumiConfigSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetLogToStderr(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings EnableLogToStderr(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings DisableLogToStderr(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ToggleLogToStderr(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetNonInteractive(this PulumiConfigSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetNonInteractive(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings EnableNonInteractive(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings DisableNonInteractive(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ToggleNonInteractive(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetProfiling(this PulumiConfigSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetProfiling(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetTracing(this PulumiConfigSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetTracing(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings SetVerbose(this PulumiConfigSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSettings ResetVerbose(this PulumiConfigSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiConfigGetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiConfigGetSettingsExtensions
    {
        #region Value
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Value"/></em></p>
        ///   <p>The configuration value to get.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetValue(this PulumiConfigGetSettings toolSettings, string value)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Value = value;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Value"/></em></p>
        ///   <p>The configuration value to get.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetValue(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Value = null;
            return toolSettings;
        }
        #endregion
        #region Json
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetJson(this PulumiConfigGetSettings toolSettings, bool? json)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = json;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetJson(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigGetSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings EnableJson(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigGetSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings DisableJson(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigGetSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ToggleJson(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = !toolSettings.Json;
            return toolSettings;
        }
        #endregion
        #region Path
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Path"/></em></p>
        ///   <p>The key contains a path to a property in a map or list to get.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetPath(this PulumiConfigGetSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Path"/></em></p>
        ///   <p>The key contains a path to a property in a map or list to get.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetPath(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetStack(this PulumiConfigGetSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetStack(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetConfigFile(this PulumiConfigGetSettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetConfigFile(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetColor(this PulumiConfigGetSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetColor(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetWorkingDirectory(this PulumiConfigGetSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetWorkingDirectory(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetDisableIntegrityChecking(this PulumiConfigGetSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetDisableIntegrityChecking(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings EnableDisableIntegrityChecking(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings DisableDisableIntegrityChecking(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ToggleDisableIntegrityChecking(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetEmoji(this PulumiConfigGetSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetEmoji(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings EnableEmoji(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings DisableEmoji(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ToggleEmoji(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetHelp(this PulumiConfigGetSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetHelp(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings EnableHelp(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings DisableHelp(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ToggleHelp(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetLogFlow(this PulumiConfigGetSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetLogFlow(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings EnableLogFlow(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings DisableLogFlow(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ToggleLogFlow(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetLogToStderr(this PulumiConfigGetSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetLogToStderr(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings EnableLogToStderr(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings DisableLogToStderr(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ToggleLogToStderr(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetNonInteractive(this PulumiConfigGetSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetNonInteractive(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings EnableNonInteractive(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings DisableNonInteractive(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ToggleNonInteractive(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetProfiling(this PulumiConfigGetSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetProfiling(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetTracing(this PulumiConfigGetSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetTracing(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigGetSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings SetVerbose(this PulumiConfigGetSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigGetSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigGetSettings ResetVerbose(this PulumiConfigGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiConfigRefreshSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiConfigRefreshSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.Force"/></em></p>
        ///   <p>Overwrite configuration file, if it exists, without creating a backup.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetForce(this PulumiConfigRefreshSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.Force"/></em></p>
        ///   <p>Overwrite configuration file, if it exists, without creating a backup.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetForce(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRefreshSettings.Force"/></em></p>
        ///   <p>Overwrite configuration file, if it exists, without creating a backup.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings EnableForce(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRefreshSettings.Force"/></em></p>
        ///   <p>Overwrite configuration file, if it exists, without creating a backup.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings DisableForce(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRefreshSettings.Force"/></em></p>
        ///   <p>Overwrite configuration file, if it exists, without creating a backup.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ToggleForce(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetStack(this PulumiConfigRefreshSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetStack(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetConfigFile(this PulumiConfigRefreshSettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetConfigFile(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetColor(this PulumiConfigRefreshSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetColor(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetWorkingDirectory(this PulumiConfigRefreshSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetWorkingDirectory(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetDisableIntegrityChecking(this PulumiConfigRefreshSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetDisableIntegrityChecking(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings EnableDisableIntegrityChecking(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings DisableDisableIntegrityChecking(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ToggleDisableIntegrityChecking(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetEmoji(this PulumiConfigRefreshSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetEmoji(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings EnableEmoji(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings DisableEmoji(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ToggleEmoji(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetHelp(this PulumiConfigRefreshSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetHelp(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings EnableHelp(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings DisableHelp(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ToggleHelp(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetLogFlow(this PulumiConfigRefreshSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetLogFlow(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings EnableLogFlow(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings DisableLogFlow(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ToggleLogFlow(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetLogToStderr(this PulumiConfigRefreshSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetLogToStderr(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings EnableLogToStderr(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings DisableLogToStderr(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ToggleLogToStderr(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetNonInteractive(this PulumiConfigRefreshSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetNonInteractive(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings EnableNonInteractive(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings DisableNonInteractive(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ToggleNonInteractive(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetProfiling(this PulumiConfigRefreshSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetProfiling(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetTracing(this PulumiConfigRefreshSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetTracing(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRefreshSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings SetVerbose(this PulumiConfigRefreshSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRefreshSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRefreshSettings ResetVerbose(this PulumiConfigRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiConfigRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiConfigRemoveSettingsExtensions
    {
        #region Value
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.Value"/></em></p>
        ///   <p>The configuration value to remove.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetValue(this PulumiConfigRemoveSettings toolSettings, string value)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Value = value;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.Value"/></em></p>
        ///   <p>The configuration value to remove.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetValue(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Value = null;
            return toolSettings;
        }
        #endregion
        #region Path
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.Path"/></em></p>
        ///   <p>The key contains a path to a property in a map or list to remove.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetPath(this PulumiConfigRemoveSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.Path"/></em></p>
        ///   <p>The key contains a path to a property in a map or list to remove.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetPath(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetStack(this PulumiConfigRemoveSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetStack(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetConfigFile(this PulumiConfigRemoveSettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetConfigFile(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetColor(this PulumiConfigRemoveSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetColor(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetWorkingDirectory(this PulumiConfigRemoveSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetWorkingDirectory(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetDisableIntegrityChecking(this PulumiConfigRemoveSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetDisableIntegrityChecking(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings EnableDisableIntegrityChecking(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings DisableDisableIntegrityChecking(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ToggleDisableIntegrityChecking(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetEmoji(this PulumiConfigRemoveSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetEmoji(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings EnableEmoji(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings DisableEmoji(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ToggleEmoji(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetHelp(this PulumiConfigRemoveSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetHelp(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings EnableHelp(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings DisableHelp(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ToggleHelp(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetLogFlow(this PulumiConfigRemoveSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetLogFlow(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings EnableLogFlow(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings DisableLogFlow(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ToggleLogFlow(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetLogToStderr(this PulumiConfigRemoveSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetLogToStderr(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings EnableLogToStderr(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings DisableLogToStderr(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ToggleLogToStderr(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetNonInteractive(this PulumiConfigRemoveSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetNonInteractive(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings EnableNonInteractive(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings DisableNonInteractive(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ToggleNonInteractive(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetProfiling(this PulumiConfigRemoveSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetProfiling(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetTracing(this PulumiConfigRemoveSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetTracing(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigRemoveSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings SetVerbose(this PulumiConfigRemoveSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigRemoveSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigRemoveSettings ResetVerbose(this PulumiConfigRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiConfigSetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiConfigSetSettingsExtensions
    {
        #region Value
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Value"/></em></p>
        ///   <p>The configuration value to set.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetValue(this PulumiConfigSetSettings toolSettings, string value)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Value = value;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Value"/></em></p>
        ///   <p>The configuration value to set.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetValue(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Value = null;
            return toolSettings;
        }
        #endregion
        #region Path
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Path"/></em></p>
        ///   <p>The key contains a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetPath(this PulumiConfigSetSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Path"/></em></p>
        ///   <p>The key contains a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetPath(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
        #region Plaintext
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Plaintext"/></em></p>
        ///   <p>Save the value as plaintext (unencrypted).</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetPlaintext(this PulumiConfigSetSettings toolSettings, bool? plaintext)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plaintext = plaintext;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Plaintext"/></em></p>
        ///   <p>Save the value as plaintext (unencrypted).</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetPlaintext(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plaintext = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSetSettings.Plaintext"/></em></p>
        ///   <p>Save the value as plaintext (unencrypted).</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings EnablePlaintext(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plaintext = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSetSettings.Plaintext"/></em></p>
        ///   <p>Save the value as plaintext (unencrypted).</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings DisablePlaintext(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plaintext = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSetSettings.Plaintext"/></em></p>
        ///   <p>Save the value as plaintext (unencrypted).</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings TogglePlaintext(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plaintext = !toolSettings.Plaintext;
            return toolSettings;
        }
        #endregion
        #region Secret
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Secret"/></em></p>
        ///   <p>Encrypt the value instead of storing it in plaintext.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetSecret(this PulumiConfigSetSettings toolSettings, bool? secret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = secret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Secret"/></em></p>
        ///   <p>Encrypt the value instead of storing it in plaintext.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetSecret(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSetSettings.Secret"/></em></p>
        ///   <p>Encrypt the value instead of storing it in plaintext.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings EnableSecret(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSetSettings.Secret"/></em></p>
        ///   <p>Encrypt the value instead of storing it in plaintext.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings DisableSecret(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSetSettings.Secret"/></em></p>
        ///   <p>Encrypt the value instead of storing it in plaintext.</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ToggleSecret(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = !toolSettings.Secret;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetStack(this PulumiConfigSetSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetStack(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetConfigFile(this PulumiConfigSetSettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetConfigFile(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetColor(this PulumiConfigSetSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetColor(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetWorkingDirectory(this PulumiConfigSetSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetWorkingDirectory(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetDisableIntegrityChecking(this PulumiConfigSetSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetDisableIntegrityChecking(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings EnableDisableIntegrityChecking(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings DisableDisableIntegrityChecking(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ToggleDisableIntegrityChecking(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetEmoji(this PulumiConfigSetSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetEmoji(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings EnableEmoji(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings DisableEmoji(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ToggleEmoji(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetHelp(this PulumiConfigSetSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetHelp(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings EnableHelp(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings DisableHelp(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ToggleHelp(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetLogFlow(this PulumiConfigSetSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetLogFlow(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings EnableLogFlow(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings DisableLogFlow(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ToggleLogFlow(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetLogToStderr(this PulumiConfigSetSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetLogToStderr(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings EnableLogToStderr(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings DisableLogToStderr(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ToggleLogToStderr(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetNonInteractive(this PulumiConfigSetSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetNonInteractive(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiConfigSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings EnableNonInteractive(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiConfigSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings DisableNonInteractive(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiConfigSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ToggleNonInteractive(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetProfiling(this PulumiConfigSetSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetProfiling(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetTracing(this PulumiConfigSetSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetTracing(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiConfigSetSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings SetVerbose(this PulumiConfigSetSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiConfigSetSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiConfigSetSettings ResetVerbose(this PulumiConfigSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiDestroySettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiDestroySettingsExtensions
    {
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetDebug(this PulumiDestroySettings toolSettings, bool? debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetDebug(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableDebug(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableDebug(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleDebug(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = !toolSettings.Debug;
            return toolSettings;
        }
        #endregion
        #region Diff
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetDiff(this PulumiDestroySettings toolSettings, bool? diff)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = diff;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetDiff(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableDiff(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableDiff(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleDiff(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = !toolSettings.Diff;
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Message"/></em></p>
        ///   <p>Optional message to associate with the destroy operation.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetMessage(this PulumiDestroySettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Message"/></em></p>
        ///   <p>Optional message to associate with the destroy operation.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetMessage(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region Parallel
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Parallel"/></em></p>
        ///   <p>Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetParallel(this PulumiDestroySettings toolSettings, int? parallel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Parallel = parallel;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Parallel"/></em></p>
        ///   <p>Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetParallel(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Parallel = null;
            return toolSettings;
        }
        #endregion
        #region Refresh
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetRefresh(this PulumiDestroySettings toolSettings, bool? refresh)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = refresh;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetRefresh(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableRefresh(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableRefresh(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleRefresh(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = !toolSettings.Refresh;
            return toolSettings;
        }
        #endregion
        #region ShowConfig
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetShowConfig(this PulumiDestroySettings toolSettings, bool? showConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = showConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetShowConfig(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableShowConfig(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableShowConfig(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleShowConfig(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = !toolSettings.ShowConfig;
            return toolSettings;
        }
        #endregion
        #region ShowReplacementSteps
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetShowReplacementSteps(this PulumiDestroySettings toolSettings, bool? showReplacementSteps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = showReplacementSteps;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetShowReplacementSteps(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableShowReplacementSteps(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableShowReplacementSteps(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleShowReplacementSteps(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = !toolSettings.ShowReplacementSteps;
            return toolSettings;
        }
        #endregion
        #region ShowSames
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetShowSames(this PulumiDestroySettings toolSettings, bool? showSames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = showSames;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetShowSames(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableShowSames(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableShowSames(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleShowSames(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = !toolSettings.ShowSames;
            return toolSettings;
        }
        #endregion
        #region SkipPreview
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the destroy.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetSkipPreview(this PulumiDestroySettings toolSettings, bool? skipPreview)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = skipPreview;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the destroy.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetSkipPreview(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the destroy.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableSkipPreview(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the destroy.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableSkipPreview(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the destroy.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleSkipPreview(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = !toolSettings.SkipPreview;
            return toolSettings;
        }
        #endregion
        #region SuppressOutputs
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetSuppressOutputs(this PulumiDestroySettings toolSettings, bool? suppressOutputs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = suppressOutputs;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetSuppressOutputs(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableSuppressOutputs(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableSuppressOutputs(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleSuppressOutputs(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = !toolSettings.SuppressOutputs;
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to destroy. All resources necessary to destroy this target will also be destroyed. Multiple resources can be specified using: --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetTarget(this PulumiDestroySettings toolSettings, string target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = target;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to destroy. All resources necessary to destroy this target will also be destroyed. Multiple resources can be specified using: --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetTarget(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = null;
            return toolSettings;
        }
        #endregion
        #region TargetDependents
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.TargetDependents"/></em></p>
        ///   <p>Allows destroying of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetTargetDependents(this PulumiDestroySettings toolSettings, bool? targetDependents)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = targetDependents;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.TargetDependents"/></em></p>
        ///   <p>Allows destroying of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetTargetDependents(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.TargetDependents"/></em></p>
        ///   <p>Allows destroying of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableTargetDependents(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.TargetDependents"/></em></p>
        ///   <p>Allows destroying of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableTargetDependents(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.TargetDependents"/></em></p>
        ///   <p>Allows destroying of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleTargetDependents(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = !toolSettings.TargetDependents;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the destroy after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetYes(this PulumiDestroySettings toolSettings, bool? yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the destroy after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetYes(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the destroy after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableYes(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the destroy after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableYes(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the destroy after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleYes(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = !toolSettings.Yes;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetStack(this PulumiDestroySettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetStack(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetConfigFile(this PulumiDestroySettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetConfigFile(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetColor(this PulumiDestroySettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetColor(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetWorkingDirectory(this PulumiDestroySettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetWorkingDirectory(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetDisableIntegrityChecking(this PulumiDestroySettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetDisableIntegrityChecking(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableDisableIntegrityChecking(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableDisableIntegrityChecking(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleDisableIntegrityChecking(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetEmoji(this PulumiDestroySettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetEmoji(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableEmoji(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableEmoji(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleEmoji(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetHelp(this PulumiDestroySettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetHelp(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableHelp(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableHelp(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleHelp(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetLogFlow(this PulumiDestroySettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetLogFlow(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableLogFlow(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableLogFlow(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleLogFlow(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetLogToStderr(this PulumiDestroySettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetLogToStderr(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableLogToStderr(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableLogToStderr(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleLogToStderr(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetNonInteractive(this PulumiDestroySettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetNonInteractive(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiDestroySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings EnableNonInteractive(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiDestroySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings DisableNonInteractive(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiDestroySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ToggleNonInteractive(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetProfiling(this PulumiDestroySettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetProfiling(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetTracing(this PulumiDestroySettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetTracing(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiDestroySettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings SetVerbose(this PulumiDestroySettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiDestroySettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiDestroySettings ResetVerbose(this PulumiDestroySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiHistorySettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiHistorySettingsExtensions
    {
        #region Json
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetJson(this PulumiHistorySettings toolSettings, bool? json)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = json;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetJson(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiHistorySettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings EnableJson(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiHistorySettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings DisableJson(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiHistorySettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ToggleJson(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = !toolSettings.Json;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetShowSecrets(this PulumiHistorySettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetShowSecrets(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiHistorySettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings EnableShowSecrets(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiHistorySettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings DisableShowSecrets(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiHistorySettings.ShowSecrets"/></em></p>
        ///   <p>Show secret values when listing config instead of displaying blinded values.</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ToggleShowSecrets(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetStack(this PulumiHistorySettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetStack(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetColor(this PulumiHistorySettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetColor(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetWorkingDirectory(this PulumiHistorySettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetWorkingDirectory(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetDisableIntegrityChecking(this PulumiHistorySettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetDisableIntegrityChecking(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiHistorySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings EnableDisableIntegrityChecking(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiHistorySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings DisableDisableIntegrityChecking(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiHistorySettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ToggleDisableIntegrityChecking(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetEmoji(this PulumiHistorySettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetEmoji(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiHistorySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings EnableEmoji(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiHistorySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings DisableEmoji(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiHistorySettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ToggleEmoji(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetHelp(this PulumiHistorySettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetHelp(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiHistorySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings EnableHelp(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiHistorySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings DisableHelp(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiHistorySettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ToggleHelp(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetLogFlow(this PulumiHistorySettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetLogFlow(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiHistorySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings EnableLogFlow(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiHistorySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings DisableLogFlow(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiHistorySettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ToggleLogFlow(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetLogToStderr(this PulumiHistorySettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetLogToStderr(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiHistorySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings EnableLogToStderr(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiHistorySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings DisableLogToStderr(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiHistorySettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ToggleLogToStderr(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetNonInteractive(this PulumiHistorySettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetNonInteractive(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiHistorySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings EnableNonInteractive(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiHistorySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings DisableNonInteractive(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiHistorySettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ToggleNonInteractive(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetProfiling(this PulumiHistorySettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetProfiling(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetTracing(this PulumiHistorySettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetTracing(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiHistorySettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings SetVerbose(this PulumiHistorySettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiHistorySettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiHistorySettings ResetVerbose(this PulumiHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiLoginSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiLoginSettingsExtensions
    {
        #region Location
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.Location"/></em></p>
        ///   <p>Specify a URL or a local/cloud path to the Pulumi instance you wish to use. Defaults to app.pulumi.com.</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetLocation(this PulumiLoginSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.Location"/></em></p>
        ///   <p>Specify a URL or a local/cloud path to the Pulumi instance you wish to use. Defaults to app.pulumi.com.</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetLocation(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region CloudUrl
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.CloudUrl"/></em></p>
        ///   <p>A cloud URL to log into. This is the same as specifying a location.</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetCloudUrl(this PulumiLoginSettings toolSettings, string cloudUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CloudUrl = cloudUrl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.CloudUrl"/></em></p>
        ///   <p>A cloud URL to log into. This is the same as specifying a location.</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetCloudUrl(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CloudUrl = null;
            return toolSettings;
        }
        #endregion
        #region Local
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.Local"/></em></p>
        ///   <p>Use Pulumi in local-only mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetLocal(this PulumiLoginSettings toolSettings, bool? local)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = local;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.Local"/></em></p>
        ///   <p>Use Pulumi in local-only mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetLocal(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLoginSettings.Local"/></em></p>
        ///   <p>Use Pulumi in local-only mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings EnableLocal(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLoginSettings.Local"/></em></p>
        ///   <p>Use Pulumi in local-only mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings DisableLocal(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLoginSettings.Local"/></em></p>
        ///   <p>Use Pulumi in local-only mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ToggleLocal(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = !toolSettings.Local;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetColor(this PulumiLoginSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetColor(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetWorkingDirectory(this PulumiLoginSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetWorkingDirectory(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetDisableIntegrityChecking(this PulumiLoginSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetDisableIntegrityChecking(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLoginSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings EnableDisableIntegrityChecking(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLoginSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings DisableDisableIntegrityChecking(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLoginSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ToggleDisableIntegrityChecking(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetEmoji(this PulumiLoginSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetEmoji(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLoginSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings EnableEmoji(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLoginSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings DisableEmoji(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLoginSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ToggleEmoji(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetHelp(this PulumiLoginSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetHelp(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLoginSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings EnableHelp(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLoginSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings DisableHelp(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLoginSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ToggleHelp(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetLogFlow(this PulumiLoginSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetLogFlow(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLoginSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings EnableLogFlow(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLoginSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings DisableLogFlow(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLoginSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ToggleLogFlow(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetLogToStderr(this PulumiLoginSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetLogToStderr(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLoginSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings EnableLogToStderr(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLoginSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings DisableLogToStderr(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLoginSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ToggleLogToStderr(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetNonInteractive(this PulumiLoginSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetNonInteractive(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLoginSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings EnableNonInteractive(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLoginSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings DisableNonInteractive(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLoginSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ToggleNonInteractive(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetProfiling(this PulumiLoginSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetProfiling(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetTracing(this PulumiLoginSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetTracing(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLoginSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings SetVerbose(this PulumiLoginSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLoginSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiLoginSettings ResetVerbose(this PulumiLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiLogoutSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiLogoutSettingsExtensions
    {
        #region Location
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.Location"/></em></p>
        ///   <p>Specify a URL or a local/cloud path to the Pulumi instance you wish to logout from. If no URL is provided, you will be logged out of the current backend.</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetLocation(this PulumiLogoutSettings toolSettings, string location)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = location;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.Location"/></em></p>
        ///   <p>Specify a URL or a local/cloud path to the Pulumi instance you wish to logout from. If no URL is provided, you will be logged out of the current backend.</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetLocation(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Location = null;
            return toolSettings;
        }
        #endregion
        #region CloudUrl
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.CloudUrl"/></em></p>
        ///   <p> A cloud URL to log out of (defaults to current cloud). This is the same as specifying a location.</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetCloudUrl(this PulumiLogoutSettings toolSettings, string cloudUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CloudUrl = cloudUrl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.CloudUrl"/></em></p>
        ///   <p> A cloud URL to log out of (defaults to current cloud). This is the same as specifying a location.</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetCloudUrl(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CloudUrl = null;
            return toolSettings;
        }
        #endregion
        #region Local
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.Local"/></em></p>
        ///   <p>Log out of using local mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetLocal(this PulumiLogoutSettings toolSettings, bool? local)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = local;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.Local"/></em></p>
        ///   <p>Log out of using local mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetLocal(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogoutSettings.Local"/></em></p>
        ///   <p>Log out of using local mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings EnableLocal(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogoutSettings.Local"/></em></p>
        ///   <p>Log out of using local mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings DisableLocal(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogoutSettings.Local"/></em></p>
        ///   <p>Log out of using local mode.</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ToggleLocal(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Local = !toolSettings.Local;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetColor(this PulumiLogoutSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetColor(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetWorkingDirectory(this PulumiLogoutSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetWorkingDirectory(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetDisableIntegrityChecking(this PulumiLogoutSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetDisableIntegrityChecking(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogoutSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings EnableDisableIntegrityChecking(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogoutSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings DisableDisableIntegrityChecking(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogoutSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ToggleDisableIntegrityChecking(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetEmoji(this PulumiLogoutSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetEmoji(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogoutSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings EnableEmoji(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogoutSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings DisableEmoji(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogoutSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ToggleEmoji(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetHelp(this PulumiLogoutSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetHelp(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogoutSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings EnableHelp(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogoutSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings DisableHelp(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogoutSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ToggleHelp(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetLogFlow(this PulumiLogoutSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetLogFlow(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogoutSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings EnableLogFlow(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogoutSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings DisableLogFlow(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogoutSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ToggleLogFlow(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetLogToStderr(this PulumiLogoutSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetLogToStderr(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogoutSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings EnableLogToStderr(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogoutSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings DisableLogToStderr(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogoutSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ToggleLogToStderr(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetNonInteractive(this PulumiLogoutSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetNonInteractive(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogoutSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings EnableNonInteractive(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogoutSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings DisableNonInteractive(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogoutSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ToggleNonInteractive(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetProfiling(this PulumiLogoutSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetProfiling(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetTracing(this PulumiLogoutSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetTracing(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogoutSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings SetVerbose(this PulumiLogoutSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogoutSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiLogoutSettings ResetVerbose(this PulumiLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiLogsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiLogsSettingsExtensions
    {
        #region Follow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Follow"/></em></p>
        ///   <p>Follow the log stream in real time (like tail -f).</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetFollow(this PulumiLogsSettings toolSettings, bool? follow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = follow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Follow"/></em></p>
        ///   <p>Follow the log stream in real time (like tail -f).</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetFollow(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogsSettings.Follow"/></em></p>
        ///   <p>Follow the log stream in real time (like tail -f).</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings EnableFollow(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogsSettings.Follow"/></em></p>
        ///   <p>Follow the log stream in real time (like tail -f).</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings DisableFollow(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogsSettings.Follow"/></em></p>
        ///   <p>Follow the log stream in real time (like tail -f).</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ToggleFollow(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = !toolSettings.Follow;
            return toolSettings;
        }
        #endregion
        #region Json
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetJson(this PulumiLogsSettings toolSettings, bool? json)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = json;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetJson(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogsSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings EnableJson(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogsSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings DisableJson(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogsSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ToggleJson(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = !toolSettings.Json;
            return toolSettings;
        }
        #endregion
        #region Resource
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Resource"/></em></p>
        ///   <p>Only return logs for the requested resource ('name', 'type::name' or full URN).  Defaults to returning all logs.</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetResource(this PulumiLogsSettings toolSettings, string resource)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Resource = resource;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Resource"/></em></p>
        ///   <p>Only return logs for the requested resource ('name', 'type::name' or full URN).  Defaults to returning all logs.</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetResource(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Resource = null;
            return toolSettings;
        }
        #endregion
        #region Since
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Since"/></em></p>
        ///   <p>Only return logs newer than a relative duration ('5s', '2m', '3h') or absolute timestamp.  Defaults to returning the last 1 hour of logs. (default 1h).</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetSince(this PulumiLogsSettings toolSettings, string since)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = since;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Since"/></em></p>
        ///   <p>Only return logs newer than a relative duration ('5s', '2m', '3h') or absolute timestamp.  Defaults to returning the last 1 hour of logs. (default 1h).</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetSince(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetStack(this PulumiLogsSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetStack(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetConfigFile(this PulumiLogsSettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetConfigFile(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetColor(this PulumiLogsSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetColor(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetWorkingDirectory(this PulumiLogsSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetWorkingDirectory(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetDisableIntegrityChecking(this PulumiLogsSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetDisableIntegrityChecking(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogsSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings EnableDisableIntegrityChecking(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogsSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings DisableDisableIntegrityChecking(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogsSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ToggleDisableIntegrityChecking(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetEmoji(this PulumiLogsSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetEmoji(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogsSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings EnableEmoji(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogsSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings DisableEmoji(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogsSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ToggleEmoji(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetHelp(this PulumiLogsSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetHelp(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogsSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings EnableHelp(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogsSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings DisableHelp(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogsSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ToggleHelp(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetLogFlow(this PulumiLogsSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetLogFlow(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogsSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings EnableLogFlow(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogsSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings DisableLogFlow(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogsSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ToggleLogFlow(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetLogToStderr(this PulumiLogsSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetLogToStderr(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogsSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings EnableLogToStderr(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogsSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings DisableLogToStderr(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogsSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ToggleLogToStderr(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetNonInteractive(this PulumiLogsSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetNonInteractive(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiLogsSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings EnableNonInteractive(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiLogsSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings DisableNonInteractive(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiLogsSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ToggleNonInteractive(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetProfiling(this PulumiLogsSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetProfiling(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetTracing(this PulumiLogsSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetTracing(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiLogsSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings SetVerbose(this PulumiLogsSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiLogsSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiLogsSettings ResetVerbose(this PulumiLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiPluginInstallSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiPluginInstallSettingsExtensions
    {
        #region KindNameVersion
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.KindNameVersion"/></em></p>
        ///   <p>Installation may be run either with a specific KIND, NAME, and VERSION, or by omitting these and letting Pulumi compute the set of plugins that may be required by the current project. VERSION cannot be a range: it must be a specific number.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetKindNameVersion(this PulumiPluginInstallSettings toolSettings, string kindNameVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KindNameVersion = kindNameVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.KindNameVersion"/></em></p>
        ///   <p>Installation may be run either with a specific KIND, NAME, and VERSION, or by omitting these and letting Pulumi compute the set of plugins that may be required by the current project. VERSION cannot be a range: it must be a specific number.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetKindNameVersion(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KindNameVersion = null;
            return toolSettings;
        }
        #endregion
        #region Exact
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.Exact"/></em></p>
        ///   <p>Force installation of an exact version match (usually >= is accepted).</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetExact(this PulumiPluginInstallSettings toolSettings, bool? exact)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Exact = exact;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.Exact"/></em></p>
        ///   <p>Force installation of an exact version match (usually >= is accepted).</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetExact(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Exact = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginInstallSettings.Exact"/></em></p>
        ///   <p>Force installation of an exact version match (usually >= is accepted).</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings EnableExact(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Exact = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginInstallSettings.Exact"/></em></p>
        ///   <p>Force installation of an exact version match (usually >= is accepted).</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings DisableExact(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Exact = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginInstallSettings.Exact"/></em></p>
        ///   <p>Force installation of an exact version match (usually >= is accepted).</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ToggleExact(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Exact = !toolSettings.Exact;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.File"/></em></p>
        ///   <p>Install a plugin from a tarball file, instead of downloading it.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetFile(this PulumiPluginInstallSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.File"/></em></p>
        ///   <p>Install a plugin from a tarball file, instead of downloading it.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetFile(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Reinstall
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.Reinstall"/></em></p>
        ///   <p>Reinstall a plugin even if it already exists.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetReinstall(this PulumiPluginInstallSettings toolSettings, bool? reinstall)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reinstall = reinstall;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.Reinstall"/></em></p>
        ///   <p>Reinstall a plugin even if it already exists.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetReinstall(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reinstall = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginInstallSettings.Reinstall"/></em></p>
        ///   <p>Reinstall a plugin even if it already exists.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings EnableReinstall(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reinstall = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginInstallSettings.Reinstall"/></em></p>
        ///   <p>Reinstall a plugin even if it already exists.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings DisableReinstall(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reinstall = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginInstallSettings.Reinstall"/></em></p>
        ///   <p>Reinstall a plugin even if it already exists.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ToggleReinstall(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Reinstall = !toolSettings.Reinstall;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.Server"/></em></p>
        ///   <p>A URL to download plugins from.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetServer(this PulumiPluginInstallSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.Server"/></em></p>
        ///   <p>A URL to download plugins from.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetServer(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetColor(this PulumiPluginInstallSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetColor(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetWorkingDirectory(this PulumiPluginInstallSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetWorkingDirectory(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetDisableIntegrityChecking(this PulumiPluginInstallSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetDisableIntegrityChecking(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginInstallSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings EnableDisableIntegrityChecking(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginInstallSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings DisableDisableIntegrityChecking(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginInstallSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ToggleDisableIntegrityChecking(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetEmoji(this PulumiPluginInstallSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetEmoji(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginInstallSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings EnableEmoji(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginInstallSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings DisableEmoji(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginInstallSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ToggleEmoji(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetHelp(this PulumiPluginInstallSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetHelp(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginInstallSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings EnableHelp(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginInstallSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings DisableHelp(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginInstallSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ToggleHelp(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetLogFlow(this PulumiPluginInstallSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetLogFlow(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginInstallSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings EnableLogFlow(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginInstallSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings DisableLogFlow(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginInstallSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ToggleLogFlow(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetLogToStderr(this PulumiPluginInstallSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetLogToStderr(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginInstallSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings EnableLogToStderr(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginInstallSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings DisableLogToStderr(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginInstallSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ToggleLogToStderr(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetNonInteractive(this PulumiPluginInstallSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetNonInteractive(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginInstallSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings EnableNonInteractive(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginInstallSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings DisableNonInteractive(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginInstallSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ToggleNonInteractive(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetProfiling(this PulumiPluginInstallSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetProfiling(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetTracing(this PulumiPluginInstallSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetTracing(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginInstallSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings SetVerbose(this PulumiPluginInstallSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginInstallSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiPluginInstallSettings ResetVerbose(this PulumiPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiPluginListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiPluginListSettingsExtensions
    {
        #region Json
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetJson(this PulumiPluginListSettings toolSettings, bool? json)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = json;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetJson(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings EnableJson(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings DisableJson(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ToggleJson(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = !toolSettings.Json;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.Project"/></em></p>
        ///   <p>List only the plugins used by the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetProject(this PulumiPluginListSettings toolSettings, bool? project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.Project"/></em></p>
        ///   <p>List only the plugins used by the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetProject(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginListSettings.Project"/></em></p>
        ///   <p>List only the plugins used by the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings EnableProject(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginListSettings.Project"/></em></p>
        ///   <p>List only the plugins used by the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings DisableProject(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginListSettings.Project"/></em></p>
        ///   <p>List only the plugins used by the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ToggleProject(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = !toolSettings.Project;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetColor(this PulumiPluginListSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetColor(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetWorkingDirectory(this PulumiPluginListSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetWorkingDirectory(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetDisableIntegrityChecking(this PulumiPluginListSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetDisableIntegrityChecking(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings EnableDisableIntegrityChecking(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings DisableDisableIntegrityChecking(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ToggleDisableIntegrityChecking(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetEmoji(this PulumiPluginListSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetEmoji(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings EnableEmoji(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings DisableEmoji(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ToggleEmoji(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetHelp(this PulumiPluginListSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetHelp(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings EnableHelp(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings DisableHelp(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ToggleHelp(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetLogFlow(this PulumiPluginListSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetLogFlow(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings EnableLogFlow(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings DisableLogFlow(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ToggleLogFlow(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetLogToStderr(this PulumiPluginListSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetLogToStderr(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings EnableLogToStderr(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings DisableLogToStderr(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ToggleLogToStderr(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetNonInteractive(this PulumiPluginListSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetNonInteractive(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings EnableNonInteractive(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings DisableNonInteractive(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ToggleNonInteractive(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetProfiling(this PulumiPluginListSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetProfiling(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetTracing(this PulumiPluginListSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetTracing(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginListSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings SetVerbose(this PulumiPluginListSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginListSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiPluginListSettings ResetVerbose(this PulumiPluginListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiPluginRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiPluginRemoveSettingsExtensions
    {
        #region KindNameVersion
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.KindNameVersion"/></em></p>
        ///   <p>Specify KIND, NAME, and/or VERSION to narrow down what will be removed. If none are specified, the entire cache will be cleared. If only KIND and NAME are specified, but not VERSION, all versions of the plugin with the given KIND and NAME will be removed. VERSION may be a range.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetKindNameVersion(this PulumiPluginRemoveSettings toolSettings, string kindNameVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KindNameVersion = kindNameVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.KindNameVersion"/></em></p>
        ///   <p>Specify KIND, NAME, and/or VERSION to narrow down what will be removed. If none are specified, the entire cache will be cleared. If only KIND and NAME are specified, but not VERSION, all versions of the plugin with the given KIND and NAME will be removed. VERSION may be a range.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetKindNameVersion(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KindNameVersion = null;
            return toolSettings;
        }
        #endregion
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.All"/></em></p>
        ///   <p>Remove all plugins.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetAll(this PulumiPluginRemoveSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.All"/></em></p>
        ///   <p>Remove all plugins.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetAll(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginRemoveSettings.All"/></em></p>
        ///   <p>Remove all plugins.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings EnableAll(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginRemoveSettings.All"/></em></p>
        ///   <p>Remove all plugins.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings DisableAll(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginRemoveSettings.All"/></em></p>
        ///   <p>Remove all plugins.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ToggleAll(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetYes(this PulumiPluginRemoveSettings toolSettings, bool? yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetYes(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings EnableYes(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings DisableYes(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ToggleYes(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = !toolSettings.Yes;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetColor(this PulumiPluginRemoveSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetColor(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetWorkingDirectory(this PulumiPluginRemoveSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetWorkingDirectory(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetDisableIntegrityChecking(this PulumiPluginRemoveSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetDisableIntegrityChecking(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings EnableDisableIntegrityChecking(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings DisableDisableIntegrityChecking(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ToggleDisableIntegrityChecking(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetEmoji(this PulumiPluginRemoveSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetEmoji(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings EnableEmoji(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings DisableEmoji(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ToggleEmoji(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetHelp(this PulumiPluginRemoveSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetHelp(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings EnableHelp(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings DisableHelp(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ToggleHelp(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetLogFlow(this PulumiPluginRemoveSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetLogFlow(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings EnableLogFlow(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings DisableLogFlow(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ToggleLogFlow(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetLogToStderr(this PulumiPluginRemoveSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetLogToStderr(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings EnableLogToStderr(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings DisableLogToStderr(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ToggleLogToStderr(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetNonInteractive(this PulumiPluginRemoveSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetNonInteractive(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPluginRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings EnableNonInteractive(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPluginRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings DisableNonInteractive(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPluginRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ToggleNonInteractive(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetProfiling(this PulumiPluginRemoveSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetProfiling(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetTracing(this PulumiPluginRemoveSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetTracing(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPluginRemoveSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings SetVerbose(this PulumiPluginRemoveSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPluginRemoveSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiPluginRemoveSettings ResetVerbose(this PulumiPluginRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiPreviewSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiPreviewSettingsExtensions
    {
        #region Config
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Config"/> to a new list</em></p>
        ///   <p>Config to use during the preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetConfig(this PulumiPreviewSettings toolSettings, params string[] config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal = config.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Config"/> to a new list</em></p>
        ///   <p>Config to use during the preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetConfig(this PulumiPreviewSettings toolSettings, IEnumerable<string> config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal = config.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiPreviewSettings.Config"/></em></p>
        ///   <p>Config to use during the preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings AddConfig(this PulumiPreviewSettings toolSettings, params string[] config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal.AddRange(config);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiPreviewSettings.Config"/></em></p>
        ///   <p>Config to use during the preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings AddConfig(this PulumiPreviewSettings toolSettings, IEnumerable<string> config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal.AddRange(config);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="PulumiPreviewSettings.Config"/></em></p>
        ///   <p>Config to use during the preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ClearConfig(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiPreviewSettings.Config"/></em></p>
        ///   <p>Config to use during the preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings RemoveConfig(this PulumiPreviewSettings toolSettings, params string[] config)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(config);
            toolSettings.ConfigInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiPreviewSettings.Config"/></em></p>
        ///   <p>Config to use during the preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings RemoveConfig(this PulumiPreviewSettings toolSettings, IEnumerable<string> config)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(config);
            toolSettings.ConfigInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ConfigPath
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetConfigPath(this PulumiPreviewSettings toolSettings, bool? configPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = configPath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetConfigPath(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableConfigPath(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableConfigPath(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleConfigPath(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = !toolSettings.ConfigPath;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetDebug(this PulumiPreviewSettings toolSettings, bool? debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetDebug(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableDebug(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableDebug(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleDebug(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = !toolSettings.Debug;
            return toolSettings;
        }
        #endregion
        #region Diff
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetDiff(this PulumiPreviewSettings toolSettings, bool? diff)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = diff;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetDiff(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableDiff(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableDiff(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleDiff(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = !toolSettings.Diff;
            return toolSettings;
        }
        #endregion
        #region ExpectNoChanges
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetExpectNoChanges(this PulumiPreviewSettings toolSettings, bool? expectNoChanges)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = expectNoChanges;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetExpectNoChanges(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableExpectNoChanges(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableExpectNoChanges(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this preview.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleExpectNoChanges(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = !toolSettings.ExpectNoChanges;
            return toolSettings;
        }
        #endregion
        #region Json
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Json"/></em></p>
        ///   <p>Serialize the preview diffs, operations, and overall output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetJson(this PulumiPreviewSettings toolSettings, bool? json)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = json;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Json"/></em></p>
        ///   <p>Serialize the preview diffs, operations, and overall output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetJson(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.Json"/></em></p>
        ///   <p>Serialize the preview diffs, operations, and overall output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableJson(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.Json"/></em></p>
        ///   <p>Serialize the preview diffs, operations, and overall output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableJson(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.Json"/></em></p>
        ///   <p>Serialize the preview diffs, operations, and overall output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleJson(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = !toolSettings.Json;
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Message"/></em></p>
        ///   <p>Optional message to associate with the preview operation.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetMessage(this PulumiPreviewSettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Message"/></em></p>
        ///   <p>Optional message to associate with the preview operation.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetMessage(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region Parallel
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Parallel"/></em></p>
        ///   <p>Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetParallel(this PulumiPreviewSettings toolSettings, int? parallel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Parallel = parallel;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Parallel"/></em></p>
        ///   <p>Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetParallel(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Parallel = null;
            return toolSettings;
        }
        #endregion
        #region Refresh
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetRefresh(this PulumiPreviewSettings toolSettings, bool? refresh)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = refresh;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetRefresh(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableRefresh(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableRefresh(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleRefresh(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = !toolSettings.Refresh;
            return toolSettings;
        }
        #endregion
        #region Replace
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Replace"/> to a new list</em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetReplace(this PulumiPreviewSettings toolSettings, params string[] replace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal = replace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Replace"/> to a new list</em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetReplace(this PulumiPreviewSettings toolSettings, IEnumerable<string> replace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal = replace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiPreviewSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings AddReplace(this PulumiPreviewSettings toolSettings, params string[] replace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal.AddRange(replace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiPreviewSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings AddReplace(this PulumiPreviewSettings toolSettings, IEnumerable<string> replace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal.AddRange(replace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="PulumiPreviewSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ClearReplace(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiPreviewSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings RemoveReplace(this PulumiPreviewSettings toolSettings, params string[] replace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(replace);
            toolSettings.ReplaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiPreviewSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings RemoveReplace(this PulumiPreviewSettings toolSettings, IEnumerable<string> replace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(replace);
            toolSettings.ReplaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ShowConfig
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetShowConfig(this PulumiPreviewSettings toolSettings, bool? showConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = showConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetShowConfig(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableShowConfig(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableShowConfig(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleShowConfig(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = !toolSettings.ShowConfig;
            return toolSettings;
        }
        #endregion
        #region ShowReplacementSteps
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetShowReplacementSteps(this PulumiPreviewSettings toolSettings, bool? showReplacementSteps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = showReplacementSteps;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetShowReplacementSteps(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableShowReplacementSteps(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableShowReplacementSteps(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleShowReplacementSteps(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = !toolSettings.ShowReplacementSteps;
            return toolSettings;
        }
        #endregion
        #region ShowSames
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetShowSames(this PulumiPreviewSettings toolSettings, bool? showSames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = showSames;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetShowSames(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableShowSames(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableShowSames(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleShowSames(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = !toolSettings.ShowSames;
            return toolSettings;
        }
        #endregion
        #region SuppressOutputs
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetSuppressOutputs(this PulumiPreviewSettings toolSettings, bool? suppressOutputs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = suppressOutputs;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetSuppressOutputs(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableSuppressOutputs(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableSuppressOutputs(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleSuppressOutputs(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = !toolSettings.SuppressOutputs;
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Target"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetTarget(this PulumiPreviewSettings toolSettings, params string[] target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal = target.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Target"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetTarget(this PulumiPreviewSettings toolSettings, IEnumerable<string> target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal = target.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiPreviewSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings AddTarget(this PulumiPreviewSettings toolSettings, params string[] target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal.AddRange(target);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiPreviewSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings AddTarget(this PulumiPreviewSettings toolSettings, IEnumerable<string> target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal.AddRange(target);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="PulumiPreviewSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ClearTarget(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiPreviewSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings RemoveTarget(this PulumiPreviewSettings toolSettings, params string[] target)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(target);
            toolSettings.TargetInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiPreviewSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings RemoveTarget(this PulumiPreviewSettings toolSettings, IEnumerable<string> target)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(target);
            toolSettings.TargetInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region TargetDependents
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetTargetDependents(this PulumiPreviewSettings toolSettings, bool? targetDependents)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = targetDependents;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetTargetDependents(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableTargetDependents(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableTargetDependents(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleTargetDependents(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = !toolSettings.TargetDependents;
            return toolSettings;
        }
        #endregion
        #region TargetReplace
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.TargetReplace"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetTargetReplace(this PulumiPreviewSettings toolSettings, params string[] targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal = targetReplace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.TargetReplace"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetTargetReplace(this PulumiPreviewSettings toolSettings, IEnumerable<string> targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal = targetReplace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiPreviewSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings AddTargetReplace(this PulumiPreviewSettings toolSettings, params string[] targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal.AddRange(targetReplace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiPreviewSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings AddTargetReplace(this PulumiPreviewSettings toolSettings, IEnumerable<string> targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal.AddRange(targetReplace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="PulumiPreviewSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ClearTargetReplace(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiPreviewSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings RemoveTargetReplace(this PulumiPreviewSettings toolSettings, params string[] targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(targetReplace);
            toolSettings.TargetReplaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiPreviewSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings RemoveTargetReplace(this PulumiPreviewSettings toolSettings, IEnumerable<string> targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(targetReplace);
            toolSettings.TargetReplaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetStack(this PulumiPreviewSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetStack(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetConfigFile(this PulumiPreviewSettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetConfigFile(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetColor(this PulumiPreviewSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetColor(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetWorkingDirectory(this PulumiPreviewSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetWorkingDirectory(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetDisableIntegrityChecking(this PulumiPreviewSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetDisableIntegrityChecking(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableDisableIntegrityChecking(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableDisableIntegrityChecking(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleDisableIntegrityChecking(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetEmoji(this PulumiPreviewSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetEmoji(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableEmoji(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableEmoji(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleEmoji(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetHelp(this PulumiPreviewSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetHelp(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableHelp(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableHelp(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleHelp(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetLogFlow(this PulumiPreviewSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetLogFlow(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableLogFlow(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableLogFlow(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleLogFlow(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetLogToStderr(this PulumiPreviewSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetLogToStderr(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableLogToStderr(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableLogToStderr(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleLogToStderr(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetNonInteractive(this PulumiPreviewSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetNonInteractive(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiPreviewSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings EnableNonInteractive(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiPreviewSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings DisableNonInteractive(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiPreviewSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ToggleNonInteractive(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetProfiling(this PulumiPreviewSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetProfiling(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetTracing(this PulumiPreviewSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetTracing(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiPreviewSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings SetVerbose(this PulumiPreviewSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiPreviewSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiPreviewSettings ResetVerbose(this PulumiPreviewSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiRefreshSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiRefreshSettingsExtensions
    {
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetDebug(this PulumiRefreshSettings toolSettings, bool? debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetDebug(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableDebug(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableDebug(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleDebug(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = !toolSettings.Debug;
            return toolSettings;
        }
        #endregion
        #region Diff
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetDiff(this PulumiRefreshSettings toolSettings, bool? diff)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = diff;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetDiff(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableDiff(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableDiff(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleDiff(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = !toolSettings.Diff;
            return toolSettings;
        }
        #endregion
        #region ExpectNoChanges
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes occur during this update.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetExpectNoChanges(this PulumiRefreshSettings toolSettings, bool? expectNoChanges)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = expectNoChanges;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes occur during this update.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetExpectNoChanges(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes occur during this update.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableExpectNoChanges(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes occur during this update.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableExpectNoChanges(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes occur during this update.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleExpectNoChanges(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = !toolSettings.ExpectNoChanges;
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Message"/></em></p>
        ///   <p>Optional message to associate with the update operation.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetMessage(this PulumiRefreshSettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Message"/></em></p>
        ///   <p>Optional message to associate with the update operation.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetMessage(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region Parallel
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Parallel"/></em></p>
        ///   <p>Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetParallel(this PulumiRefreshSettings toolSettings, int? parallel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Parallel = parallel;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Parallel"/></em></p>
        ///   <p>Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetParallel(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Parallel = null;
            return toolSettings;
        }
        #endregion
        #region ShowReplacementSteps
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetShowReplacementSteps(this PulumiRefreshSettings toolSettings, bool? showReplacementSteps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = showReplacementSteps;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetShowReplacementSteps(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableShowReplacementSteps(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableShowReplacementSteps(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleShowReplacementSteps(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = !toolSettings.ShowReplacementSteps;
            return toolSettings;
        }
        #endregion
        #region ShowSames
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetShowSames(this PulumiRefreshSettings toolSettings, bool? showSames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = showSames;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetShowSames(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableShowSames(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableShowSames(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleShowSames(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = !toolSettings.ShowSames;
            return toolSettings;
        }
        #endregion
        #region SuppressOutputs
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetSuppressOutputs(this PulumiRefreshSettings toolSettings, bool? suppressOutputs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = suppressOutputs;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetSuppressOutputs(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableSuppressOutputs(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableSuppressOutputs(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleSuppressOutputs(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = !toolSettings.SuppressOutputs;
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Target"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to refresh. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetTarget(this PulumiRefreshSettings toolSettings, params string[] target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal = target.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Target"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to refresh. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetTarget(this PulumiRefreshSettings toolSettings, IEnumerable<string> target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal = target.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiRefreshSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to refresh. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings AddTarget(this PulumiRefreshSettings toolSettings, params string[] target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal.AddRange(target);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiRefreshSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to refresh. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings AddTarget(this PulumiRefreshSettings toolSettings, IEnumerable<string> target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal.AddRange(target);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="PulumiRefreshSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to refresh. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ClearTarget(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiRefreshSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to refresh. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings RemoveTarget(this PulumiRefreshSettings toolSettings, params string[] target)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(target);
            toolSettings.TargetInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiRefreshSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to refresh. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings RemoveTarget(this PulumiRefreshSettings toolSettings, IEnumerable<string> target)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(target);
            toolSettings.TargetInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the refresh after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetYes(this PulumiRefreshSettings toolSettings, bool? yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the refresh after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetYes(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the refresh after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableYes(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the refresh after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableYes(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the refresh after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleYes(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = !toolSettings.Yes;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetStack(this PulumiRefreshSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetStack(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetConfigFile(this PulumiRefreshSettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetConfigFile(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetColor(this PulumiRefreshSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetColor(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetWorkingDirectory(this PulumiRefreshSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetWorkingDirectory(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetDisableIntegrityChecking(this PulumiRefreshSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetDisableIntegrityChecking(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableDisableIntegrityChecking(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableDisableIntegrityChecking(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleDisableIntegrityChecking(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetEmoji(this PulumiRefreshSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetEmoji(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableEmoji(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableEmoji(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleEmoji(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetHelp(this PulumiRefreshSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetHelp(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableHelp(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableHelp(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleHelp(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetLogFlow(this PulumiRefreshSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetLogFlow(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableLogFlow(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableLogFlow(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleLogFlow(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetLogToStderr(this PulumiRefreshSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetLogToStderr(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableLogToStderr(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableLogToStderr(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleLogToStderr(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetNonInteractive(this PulumiRefreshSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetNonInteractive(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings EnableNonInteractive(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings DisableNonInteractive(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiRefreshSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ToggleNonInteractive(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetProfiling(this PulumiRefreshSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetProfiling(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetTracing(this PulumiRefreshSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetTracing(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiRefreshSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings SetVerbose(this PulumiRefreshSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiRefreshSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiRefreshSettings ResetVerbose(this PulumiRefreshSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackSettingsExtensions
    {
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetStack(this PulumiStackSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetStack(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetShowIds(this PulumiStackSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetShowIds(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings EnableShowIds(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings DisableShowIds(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ToggleShowIds(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetShowSecrets(this PulumiStackSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetShowSecrets(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings EnableShowSecrets(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings DisableShowSecrets(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ToggleShowSecrets(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetShowUrns(this PulumiStackSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetShowUrns(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings EnableShowUrns(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings DisableShowUrns(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ToggleShowUrns(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetColor(this PulumiStackSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetColor(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetWorkingDirectory(this PulumiStackSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetWorkingDirectory(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetDisableIntegrityChecking(this PulumiStackSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetDisableIntegrityChecking(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings EnableDisableIntegrityChecking(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings DisableDisableIntegrityChecking(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ToggleDisableIntegrityChecking(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetEmoji(this PulumiStackSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetEmoji(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings EnableEmoji(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings DisableEmoji(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ToggleEmoji(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetHelp(this PulumiStackSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetHelp(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings EnableHelp(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings DisableHelp(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ToggleHelp(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetLogFlow(this PulumiStackSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetLogFlow(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings EnableLogFlow(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings DisableLogFlow(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ToggleLogFlow(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetLogToStderr(this PulumiStackSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetLogToStderr(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings EnableLogToStderr(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings DisableLogToStderr(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ToggleLogToStderr(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetNonInteractive(this PulumiStackSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetNonInteractive(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings EnableNonInteractive(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings DisableNonInteractive(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ToggleNonInteractive(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetProfiling(this PulumiStackSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetProfiling(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetTracing(this PulumiStackSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetTracing(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings SetVerbose(this PulumiStackSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackSettings ResetVerbose(this PulumiStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackExportSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackExportSettingsExtensions
    {
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.File"/></em></p>
        ///   <p>A filename to write stack output to.</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetFile(this PulumiStackExportSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.File"/></em></p>
        ///   <p>A filename to write stack output to.</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetFile(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetStack(this PulumiStackExportSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetStack(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetShowIds(this PulumiStackExportSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetShowIds(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackExportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings EnableShowIds(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackExportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings DisableShowIds(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackExportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ToggleShowIds(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetShowSecrets(this PulumiStackExportSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetShowSecrets(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackExportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings EnableShowSecrets(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackExportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings DisableShowSecrets(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackExportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ToggleShowSecrets(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetShowUrns(this PulumiStackExportSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetShowUrns(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackExportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings EnableShowUrns(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackExportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings DisableShowUrns(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackExportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ToggleShowUrns(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetColor(this PulumiStackExportSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetColor(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetWorkingDirectory(this PulumiStackExportSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetWorkingDirectory(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetDisableIntegrityChecking(this PulumiStackExportSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetDisableIntegrityChecking(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackExportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings EnableDisableIntegrityChecking(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackExportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings DisableDisableIntegrityChecking(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackExportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ToggleDisableIntegrityChecking(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetEmoji(this PulumiStackExportSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetEmoji(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackExportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings EnableEmoji(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackExportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings DisableEmoji(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackExportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ToggleEmoji(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetHelp(this PulumiStackExportSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetHelp(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackExportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings EnableHelp(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackExportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings DisableHelp(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackExportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ToggleHelp(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetLogFlow(this PulumiStackExportSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetLogFlow(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackExportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings EnableLogFlow(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackExportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings DisableLogFlow(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackExportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ToggleLogFlow(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetLogToStderr(this PulumiStackExportSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetLogToStderr(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackExportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings EnableLogToStderr(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackExportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings DisableLogToStderr(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackExportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ToggleLogToStderr(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetNonInteractive(this PulumiStackExportSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetNonInteractive(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackExportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings EnableNonInteractive(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackExportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings DisableNonInteractive(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackExportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ToggleNonInteractive(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetProfiling(this PulumiStackExportSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetProfiling(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetTracing(this PulumiStackExportSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetTracing(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackExportSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings SetVerbose(this PulumiStackExportSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackExportSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackExportSettings ResetVerbose(this PulumiStackExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackGraphSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackGraphSettingsExtensions
    {
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.File"/></em></p>
        ///   <p>The file to export to.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetFile(this PulumiStackGraphSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.File"/></em></p>
        ///   <p>The file to export to.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetFile(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region DependencyEdgeColor
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.DependencyEdgeColor"/></em></p>
        ///   <p>Sets the color of dependency edges in the graph (default <c>#246C60</c>).</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetDependencyEdgeColor(this PulumiStackGraphSettings toolSettings, string dependencyEdgeColor)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DependencyEdgeColor = dependencyEdgeColor;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.DependencyEdgeColor"/></em></p>
        ///   <p>Sets the color of dependency edges in the graph (default <c>#246C60</c>).</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetDependencyEdgeColor(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DependencyEdgeColor = null;
            return toolSettings;
        }
        #endregion
        #region IgnoreDependencyEdges
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.IgnoreDependencyEdges"/></em></p>
        ///   <p>Ignores edges introduced by dependency resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetIgnoreDependencyEdges(this PulumiStackGraphSettings toolSettings, bool? ignoreDependencyEdges)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreDependencyEdges = ignoreDependencyEdges;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.IgnoreDependencyEdges"/></em></p>
        ///   <p>Ignores edges introduced by dependency resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetIgnoreDependencyEdges(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreDependencyEdges = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.IgnoreDependencyEdges"/></em></p>
        ///   <p>Ignores edges introduced by dependency resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableIgnoreDependencyEdges(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreDependencyEdges = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.IgnoreDependencyEdges"/></em></p>
        ///   <p>Ignores edges introduced by dependency resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableIgnoreDependencyEdges(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreDependencyEdges = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.IgnoreDependencyEdges"/></em></p>
        ///   <p>Ignores edges introduced by dependency resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleIgnoreDependencyEdges(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreDependencyEdges = !toolSettings.IgnoreDependencyEdges;
            return toolSettings;
        }
        #endregion
        #region IgnoreParentEdges
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.IgnoreParentEdges"/></em></p>
        ///   <p>Ignores edges introduced by parent/child resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetIgnoreParentEdges(this PulumiStackGraphSettings toolSettings, bool? ignoreParentEdges)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreParentEdges = ignoreParentEdges;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.IgnoreParentEdges"/></em></p>
        ///   <p>Ignores edges introduced by parent/child resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetIgnoreParentEdges(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreParentEdges = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.IgnoreParentEdges"/></em></p>
        ///   <p>Ignores edges introduced by parent/child resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableIgnoreParentEdges(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreParentEdges = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.IgnoreParentEdges"/></em></p>
        ///   <p>Ignores edges introduced by parent/child resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableIgnoreParentEdges(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreParentEdges = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.IgnoreParentEdges"/></em></p>
        ///   <p>Ignores edges introduced by parent/child resource relationships.</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleIgnoreParentEdges(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreParentEdges = !toolSettings.IgnoreParentEdges;
            return toolSettings;
        }
        #endregion
        #region ParentEdgeColor
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.ParentEdgeColor"/></em></p>
        ///   <p>Sets the color of dependency edges in the graph (default <c>#AA6639</c>).</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetParentEdgeColor(this PulumiStackGraphSettings toolSettings, string parentEdgeColor)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParentEdgeColor = parentEdgeColor;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.ParentEdgeColor"/></em></p>
        ///   <p>Sets the color of dependency edges in the graph (default <c>#AA6639</c>).</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetParentEdgeColor(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParentEdgeColor = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetStack(this PulumiStackGraphSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetStack(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetShowIds(this PulumiStackGraphSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetShowIds(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableShowIds(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableShowIds(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleShowIds(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetShowSecrets(this PulumiStackGraphSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetShowSecrets(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableShowSecrets(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableShowSecrets(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleShowSecrets(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetShowUrns(this PulumiStackGraphSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetShowUrns(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableShowUrns(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableShowUrns(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleShowUrns(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetColor(this PulumiStackGraphSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetColor(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetWorkingDirectory(this PulumiStackGraphSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetWorkingDirectory(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetDisableIntegrityChecking(this PulumiStackGraphSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetDisableIntegrityChecking(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableDisableIntegrityChecking(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableDisableIntegrityChecking(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleDisableIntegrityChecking(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetEmoji(this PulumiStackGraphSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetEmoji(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableEmoji(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableEmoji(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleEmoji(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetHelp(this PulumiStackGraphSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetHelp(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableHelp(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableHelp(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleHelp(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetLogFlow(this PulumiStackGraphSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetLogFlow(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableLogFlow(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableLogFlow(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleLogFlow(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetLogToStderr(this PulumiStackGraphSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetLogToStderr(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableLogToStderr(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableLogToStderr(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleLogToStderr(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetNonInteractive(this PulumiStackGraphSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetNonInteractive(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackGraphSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings EnableNonInteractive(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackGraphSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings DisableNonInteractive(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackGraphSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ToggleNonInteractive(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetProfiling(this PulumiStackGraphSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetProfiling(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetTracing(this PulumiStackGraphSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetTracing(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackGraphSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings SetVerbose(this PulumiStackGraphSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackGraphSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackGraphSettings ResetVerbose(this PulumiStackGraphSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackImportSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackImportSettingsExtensions
    {
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.File"/></em></p>
        ///   <p>A filename to read stack input from.</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetFile(this PulumiStackImportSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.File"/></em></p>
        ///   <p>A filename to read stack input from.</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetFile(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.Force"/></em></p>
        ///   <p>Force the import to occur, even if apparent errors are discovered beforehand (not recommended).</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetForce(this PulumiStackImportSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.Force"/></em></p>
        ///   <p>Force the import to occur, even if apparent errors are discovered beforehand (not recommended).</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetForce(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.Force"/></em></p>
        ///   <p>Force the import to occur, even if apparent errors are discovered beforehand (not recommended).</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableForce(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.Force"/></em></p>
        ///   <p>Force the import to occur, even if apparent errors are discovered beforehand (not recommended).</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableForce(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.Force"/></em></p>
        ///   <p>Force the import to occur, even if apparent errors are discovered beforehand (not recommended).</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleForce(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetStack(this PulumiStackImportSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetStack(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetShowIds(this PulumiStackImportSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetShowIds(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableShowIds(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableShowIds(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleShowIds(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetShowSecrets(this PulumiStackImportSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetShowSecrets(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableShowSecrets(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableShowSecrets(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleShowSecrets(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetShowUrns(this PulumiStackImportSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetShowUrns(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableShowUrns(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableShowUrns(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleShowUrns(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetColor(this PulumiStackImportSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetColor(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetWorkingDirectory(this PulumiStackImportSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetWorkingDirectory(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetDisableIntegrityChecking(this PulumiStackImportSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetDisableIntegrityChecking(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableDisableIntegrityChecking(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableDisableIntegrityChecking(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleDisableIntegrityChecking(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetEmoji(this PulumiStackImportSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetEmoji(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableEmoji(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableEmoji(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleEmoji(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetHelp(this PulumiStackImportSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetHelp(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableHelp(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableHelp(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleHelp(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetLogFlow(this PulumiStackImportSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetLogFlow(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableLogFlow(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableLogFlow(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleLogFlow(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetLogToStderr(this PulumiStackImportSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetLogToStderr(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableLogToStderr(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableLogToStderr(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleLogToStderr(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetNonInteractive(this PulumiStackImportSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetNonInteractive(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackImportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings EnableNonInteractive(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackImportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings DisableNonInteractive(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackImportSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ToggleNonInteractive(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetProfiling(this PulumiStackImportSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetProfiling(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetTracing(this PulumiStackImportSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetTracing(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackImportSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings SetVerbose(this PulumiStackImportSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackImportSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackImportSettings ResetVerbose(this PulumiStackImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackInitSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackInitSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.Name"/></em></p>
        ///   <p>The name of the stack to create. Include org name if required.</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetName(this PulumiStackInitSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.Name"/></em></p>
        ///   <p>The name of the stack to create. Include org name if required.</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetName(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region SecretsProvider
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.SecretsProvider"/></em></p>
        ///   <p>The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault) (default: default).</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetSecretsProvider(this PulumiStackInitSettings toolSettings, string secretsProvider)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsProvider = secretsProvider;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.SecretsProvider"/></em></p>
        ///   <p>The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault) (default: default).</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetSecretsProvider(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsProvider = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetStack(this PulumiStackInitSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetStack(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetShowIds(this PulumiStackInitSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetShowIds(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackInitSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings EnableShowIds(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackInitSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings DisableShowIds(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackInitSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ToggleShowIds(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetShowSecrets(this PulumiStackInitSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetShowSecrets(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackInitSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings EnableShowSecrets(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackInitSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings DisableShowSecrets(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackInitSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ToggleShowSecrets(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetShowUrns(this PulumiStackInitSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetShowUrns(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackInitSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings EnableShowUrns(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackInitSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings DisableShowUrns(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackInitSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ToggleShowUrns(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetColor(this PulumiStackInitSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetColor(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetWorkingDirectory(this PulumiStackInitSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetWorkingDirectory(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetDisableIntegrityChecking(this PulumiStackInitSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetDisableIntegrityChecking(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackInitSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings EnableDisableIntegrityChecking(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackInitSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings DisableDisableIntegrityChecking(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackInitSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ToggleDisableIntegrityChecking(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetEmoji(this PulumiStackInitSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetEmoji(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackInitSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings EnableEmoji(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackInitSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings DisableEmoji(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackInitSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ToggleEmoji(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetHelp(this PulumiStackInitSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetHelp(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackInitSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings EnableHelp(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackInitSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings DisableHelp(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackInitSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ToggleHelp(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetLogFlow(this PulumiStackInitSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetLogFlow(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackInitSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings EnableLogFlow(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackInitSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings DisableLogFlow(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackInitSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ToggleLogFlow(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetLogToStderr(this PulumiStackInitSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetLogToStderr(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackInitSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings EnableLogToStderr(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackInitSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings DisableLogToStderr(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackInitSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ToggleLogToStderr(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetNonInteractive(this PulumiStackInitSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetNonInteractive(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackInitSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings EnableNonInteractive(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackInitSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings DisableNonInteractive(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackInitSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ToggleNonInteractive(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetProfiling(this PulumiStackInitSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetProfiling(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetTracing(this PulumiStackInitSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetTracing(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackInitSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings SetVerbose(this PulumiStackInitSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackInitSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackInitSettings ResetVerbose(this PulumiStackInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackListSettingsExtensions
    {
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.All"/></em></p>
        ///   <p>List all stacks instead of just stacks for the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetAll(this PulumiStackListSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.All"/></em></p>
        ///   <p>List all stacks instead of just stacks for the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetAll(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.All"/></em></p>
        ///   <p>List all stacks instead of just stacks for the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableAll(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.All"/></em></p>
        ///   <p>List all stacks instead of just stacks for the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableAll(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.All"/></em></p>
        ///   <p>List all stacks instead of just stacks for the current project.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleAll(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Json
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetJson(this PulumiStackListSettings toolSettings, bool? json)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = json;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetJson(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableJson(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableJson(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleJson(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = !toolSettings.Json;
            return toolSettings;
        }
        #endregion
        #region Organization
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Organization"/></em></p>
        ///   <p>Filter returned stacks to those in a specific organization.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetOrganization(this PulumiStackListSettings toolSettings, string organization)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Organization = organization;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Organization"/></em></p>
        ///   <p>Filter returned stacks to those in a specific organization.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetOrganization(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Organization = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Project"/></em></p>
        ///   <p>Filter returned stacks to those with a specific project name.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetProject(this PulumiStackListSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Project"/></em></p>
        ///   <p>Filter returned stacks to those with a specific project name.</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetProject(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region Tag
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Tag"/></em></p>
        ///   <p>Filter returned stacks to those in a specific tag (tag-name or tag-name=tag-value).</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetTag(this PulumiStackListSettings toolSettings, string tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tag = tag;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Tag"/></em></p>
        ///   <p>Filter returned stacks to those in a specific tag (tag-name or tag-name=tag-value).</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetTag(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tag = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetStack(this PulumiStackListSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetStack(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetShowIds(this PulumiStackListSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetShowIds(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableShowIds(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableShowIds(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleShowIds(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetShowSecrets(this PulumiStackListSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetShowSecrets(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableShowSecrets(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableShowSecrets(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleShowSecrets(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetShowUrns(this PulumiStackListSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetShowUrns(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableShowUrns(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableShowUrns(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleShowUrns(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetColor(this PulumiStackListSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetColor(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetWorkingDirectory(this PulumiStackListSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetWorkingDirectory(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetDisableIntegrityChecking(this PulumiStackListSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetDisableIntegrityChecking(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableDisableIntegrityChecking(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableDisableIntegrityChecking(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleDisableIntegrityChecking(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetEmoji(this PulumiStackListSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetEmoji(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableEmoji(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableEmoji(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleEmoji(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetHelp(this PulumiStackListSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetHelp(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableHelp(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableHelp(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleHelp(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetLogFlow(this PulumiStackListSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetLogFlow(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableLogFlow(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableLogFlow(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleLogFlow(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetLogToStderr(this PulumiStackListSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetLogToStderr(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableLogToStderr(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableLogToStderr(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleLogToStderr(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetNonInteractive(this PulumiStackListSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetNonInteractive(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings EnableNonInteractive(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings DisableNonInteractive(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ToggleNonInteractive(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetProfiling(this PulumiStackListSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetProfiling(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetTracing(this PulumiStackListSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetTracing(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackListSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings SetVerbose(this PulumiStackListSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackListSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackListSettings ResetVerbose(this PulumiStackListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackOutputSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackOutputSettingsExtensions
    {
        #region PropertyName
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.PropertyName"/></em></p>
        ///   <p>Show output of a specific property.</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetPropertyName(this PulumiStackOutputSettings toolSettings, string propertyName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyName = propertyName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.PropertyName"/></em></p>
        ///   <p>Show output of a specific property.</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetPropertyName(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyName = null;
            return toolSettings;
        }
        #endregion
        #region Json
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetJson(this PulumiStackOutputSettings toolSettings, bool? json)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = json;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetJson(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableJson(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableJson(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleJson(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = !toolSettings.Json;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetStack(this PulumiStackOutputSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetStack(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetShowIds(this PulumiStackOutputSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetShowIds(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableShowIds(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableShowIds(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleShowIds(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetShowSecrets(this PulumiStackOutputSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetShowSecrets(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableShowSecrets(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableShowSecrets(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleShowSecrets(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetShowUrns(this PulumiStackOutputSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetShowUrns(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableShowUrns(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableShowUrns(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleShowUrns(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetColor(this PulumiStackOutputSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetColor(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetWorkingDirectory(this PulumiStackOutputSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetWorkingDirectory(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetDisableIntegrityChecking(this PulumiStackOutputSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetDisableIntegrityChecking(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableDisableIntegrityChecking(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableDisableIntegrityChecking(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleDisableIntegrityChecking(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetEmoji(this PulumiStackOutputSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetEmoji(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableEmoji(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableEmoji(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleEmoji(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetHelp(this PulumiStackOutputSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetHelp(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableHelp(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableHelp(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleHelp(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetLogFlow(this PulumiStackOutputSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetLogFlow(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableLogFlow(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableLogFlow(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleLogFlow(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetLogToStderr(this PulumiStackOutputSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetLogToStderr(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableLogToStderr(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableLogToStderr(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleLogToStderr(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetNonInteractive(this PulumiStackOutputSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetNonInteractive(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackOutputSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings EnableNonInteractive(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackOutputSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings DisableNonInteractive(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackOutputSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ToggleNonInteractive(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetProfiling(this PulumiStackOutputSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetProfiling(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetTracing(this PulumiStackOutputSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetTracing(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackOutputSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings SetVerbose(this PulumiStackOutputSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackOutputSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackOutputSettings ResetVerbose(this PulumiStackOutputSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackRenameSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackRenameSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.Name"/></em></p>
        ///   <p>The name of the new stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetName(this PulumiStackRenameSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.Name"/></em></p>
        ///   <p>The name of the new stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetName(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetStack(this PulumiStackRenameSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetStack(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetShowIds(this PulumiStackRenameSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetShowIds(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRenameSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings EnableShowIds(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRenameSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings DisableShowIds(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRenameSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ToggleShowIds(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetShowSecrets(this PulumiStackRenameSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetShowSecrets(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRenameSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings EnableShowSecrets(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRenameSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings DisableShowSecrets(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRenameSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ToggleShowSecrets(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetShowUrns(this PulumiStackRenameSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetShowUrns(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRenameSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings EnableShowUrns(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRenameSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings DisableShowUrns(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRenameSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ToggleShowUrns(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetColor(this PulumiStackRenameSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetColor(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetWorkingDirectory(this PulumiStackRenameSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetWorkingDirectory(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetDisableIntegrityChecking(this PulumiStackRenameSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetDisableIntegrityChecking(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRenameSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings EnableDisableIntegrityChecking(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRenameSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings DisableDisableIntegrityChecking(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRenameSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ToggleDisableIntegrityChecking(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetEmoji(this PulumiStackRenameSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetEmoji(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRenameSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings EnableEmoji(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRenameSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings DisableEmoji(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRenameSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ToggleEmoji(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetHelp(this PulumiStackRenameSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetHelp(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRenameSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings EnableHelp(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRenameSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings DisableHelp(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRenameSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ToggleHelp(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetLogFlow(this PulumiStackRenameSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetLogFlow(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRenameSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings EnableLogFlow(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRenameSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings DisableLogFlow(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRenameSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ToggleLogFlow(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetLogToStderr(this PulumiStackRenameSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetLogToStderr(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRenameSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings EnableLogToStderr(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRenameSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings DisableLogToStderr(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRenameSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ToggleLogToStderr(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetNonInteractive(this PulumiStackRenameSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetNonInteractive(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRenameSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings EnableNonInteractive(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRenameSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings DisableNonInteractive(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRenameSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ToggleNonInteractive(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetProfiling(this PulumiStackRenameSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetProfiling(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetTracing(this PulumiStackRenameSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetTracing(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRenameSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings SetVerbose(this PulumiStackRenameSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRenameSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackRenameSettings ResetVerbose(this PulumiStackRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackRemoveSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Name"/></em></p>
        ///   <p>The name of the stack to remove.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetName(this PulumiStackRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Name"/></em></p>
        ///   <p>The name of the stack to remove.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetName(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Force"/></em></p>
        ///   <p>Forces deletion of the stack, leaving behind any resources managed by the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetForce(this PulumiStackRemoveSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Force"/></em></p>
        ///   <p>Forces deletion of the stack, leaving behind any resources managed by the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetForce(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.Force"/></em></p>
        ///   <p>Forces deletion of the stack, leaving behind any resources managed by the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableForce(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.Force"/></em></p>
        ///   <p>Forces deletion of the stack, leaving behind any resources managed by the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableForce(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.Force"/></em></p>
        ///   <p>Forces deletion of the stack, leaving behind any resources managed by the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleForce(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region PreserveConfig
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.PreserveConfig"/></em></p>
        ///   <p>Do not delete the corresponding Pulumi.<stack-name>.yaml configuration file for the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetPreserveConfig(this PulumiStackRemoveSettings toolSettings, bool? preserveConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreserveConfig = preserveConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.PreserveConfig"/></em></p>
        ///   <p>Do not delete the corresponding Pulumi.<stack-name>.yaml configuration file for the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetPreserveConfig(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreserveConfig = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.PreserveConfig"/></em></p>
        ///   <p>Do not delete the corresponding Pulumi.<stack-name>.yaml configuration file for the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnablePreserveConfig(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreserveConfig = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.PreserveConfig"/></em></p>
        ///   <p>Do not delete the corresponding Pulumi.<stack-name>.yaml configuration file for the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisablePreserveConfig(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreserveConfig = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.PreserveConfig"/></em></p>
        ///   <p>Do not delete the corresponding Pulumi.<stack-name>.yaml configuration file for the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings TogglePreserveConfig(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreserveConfig = !toolSettings.PreserveConfig;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetYes(this PulumiStackRemoveSettings toolSettings, bool? yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetYes(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableYes(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableYes(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts, and proceed with removal anyway.</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleYes(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = !toolSettings.Yes;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetStack(this PulumiStackRemoveSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetStack(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetShowIds(this PulumiStackRemoveSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetShowIds(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableShowIds(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableShowIds(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleShowIds(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetShowSecrets(this PulumiStackRemoveSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetShowSecrets(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableShowSecrets(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableShowSecrets(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleShowSecrets(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetShowUrns(this PulumiStackRemoveSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetShowUrns(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableShowUrns(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableShowUrns(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleShowUrns(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetColor(this PulumiStackRemoveSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetColor(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetWorkingDirectory(this PulumiStackRemoveSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetWorkingDirectory(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetDisableIntegrityChecking(this PulumiStackRemoveSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetDisableIntegrityChecking(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableDisableIntegrityChecking(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableDisableIntegrityChecking(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleDisableIntegrityChecking(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetEmoji(this PulumiStackRemoveSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetEmoji(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableEmoji(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableEmoji(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleEmoji(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetHelp(this PulumiStackRemoveSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetHelp(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableHelp(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableHelp(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleHelp(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetLogFlow(this PulumiStackRemoveSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetLogFlow(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableLogFlow(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableLogFlow(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleLogFlow(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetLogToStderr(this PulumiStackRemoveSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetLogToStderr(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableLogToStderr(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableLogToStderr(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleLogToStderr(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetNonInteractive(this PulumiStackRemoveSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetNonInteractive(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings EnableNonInteractive(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings DisableNonInteractive(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ToggleNonInteractive(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetProfiling(this PulumiStackRemoveSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetProfiling(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetTracing(this PulumiStackRemoveSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetTracing(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackRemoveSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings SetVerbose(this PulumiStackRemoveSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackRemoveSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackRemoveSettings ResetVerbose(this PulumiStackRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackSelectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackSelectSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.Name"/></em></p>
        ///   <p>The name of the new stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetName(this PulumiStackSelectSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.Name"/></em></p>
        ///   <p>The name of the new stack.</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetName(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetStack(this PulumiStackSelectSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetStack(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetShowIds(this PulumiStackSelectSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetShowIds(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSelectSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings EnableShowIds(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSelectSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings DisableShowIds(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSelectSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ToggleShowIds(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetShowSecrets(this PulumiStackSelectSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetShowSecrets(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSelectSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings EnableShowSecrets(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSelectSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings DisableShowSecrets(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSelectSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ToggleShowSecrets(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetShowUrns(this PulumiStackSelectSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetShowUrns(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSelectSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings EnableShowUrns(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSelectSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings DisableShowUrns(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSelectSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ToggleShowUrns(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetColor(this PulumiStackSelectSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetColor(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetWorkingDirectory(this PulumiStackSelectSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetWorkingDirectory(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetDisableIntegrityChecking(this PulumiStackSelectSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetDisableIntegrityChecking(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSelectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings EnableDisableIntegrityChecking(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSelectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings DisableDisableIntegrityChecking(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSelectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ToggleDisableIntegrityChecking(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetEmoji(this PulumiStackSelectSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetEmoji(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSelectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings EnableEmoji(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSelectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings DisableEmoji(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSelectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ToggleEmoji(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetHelp(this PulumiStackSelectSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetHelp(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSelectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings EnableHelp(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSelectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings DisableHelp(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSelectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ToggleHelp(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetLogFlow(this PulumiStackSelectSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetLogFlow(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSelectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings EnableLogFlow(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSelectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings DisableLogFlow(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSelectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ToggleLogFlow(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetLogToStderr(this PulumiStackSelectSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetLogToStderr(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSelectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings EnableLogToStderr(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSelectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings DisableLogToStderr(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSelectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ToggleLogToStderr(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetNonInteractive(this PulumiStackSelectSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetNonInteractive(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackSelectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings EnableNonInteractive(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackSelectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings DisableNonInteractive(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackSelectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ToggleNonInteractive(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetProfiling(this PulumiStackSelectSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetProfiling(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetTracing(this PulumiStackSelectSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetTracing(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackSelectSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings SetVerbose(this PulumiStackSelectSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackSelectSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackSelectSettings ResetVerbose(this PulumiStackSelectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackTagGetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackTagGetSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.Name"/></em></p>
        ///   <p>The name of the tag.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetName(this PulumiStackTagGetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.Name"/></em></p>
        ///   <p>The name of the tag.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetName(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetStack(this PulumiStackTagGetSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetStack(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetShowIds(this PulumiStackTagGetSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetShowIds(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagGetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings EnableShowIds(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagGetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings DisableShowIds(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagGetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ToggleShowIds(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetShowSecrets(this PulumiStackTagGetSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetShowSecrets(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagGetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings EnableShowSecrets(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagGetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings DisableShowSecrets(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagGetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ToggleShowSecrets(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetShowUrns(this PulumiStackTagGetSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetShowUrns(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagGetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings EnableShowUrns(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagGetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings DisableShowUrns(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagGetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ToggleShowUrns(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetColor(this PulumiStackTagGetSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetColor(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetWorkingDirectory(this PulumiStackTagGetSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetWorkingDirectory(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetDisableIntegrityChecking(this PulumiStackTagGetSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetDisableIntegrityChecking(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings EnableDisableIntegrityChecking(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings DisableDisableIntegrityChecking(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagGetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ToggleDisableIntegrityChecking(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetEmoji(this PulumiStackTagGetSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetEmoji(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings EnableEmoji(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings DisableEmoji(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagGetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ToggleEmoji(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetHelp(this PulumiStackTagGetSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetHelp(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings EnableHelp(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings DisableHelp(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagGetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ToggleHelp(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetLogFlow(this PulumiStackTagGetSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetLogFlow(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings EnableLogFlow(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings DisableLogFlow(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagGetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ToggleLogFlow(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetLogToStderr(this PulumiStackTagGetSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetLogToStderr(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings EnableLogToStderr(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings DisableLogToStderr(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagGetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ToggleLogToStderr(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetNonInteractive(this PulumiStackTagGetSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetNonInteractive(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings EnableNonInteractive(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings DisableNonInteractive(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagGetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ToggleNonInteractive(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetProfiling(this PulumiStackTagGetSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetProfiling(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetTracing(this PulumiStackTagGetSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetTracing(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagGetSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings SetVerbose(this PulumiStackTagGetSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagGetSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagGetSettings ResetVerbose(this PulumiStackTagGetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackTagListSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackTagListSettingsExtensions
    {
        #region Json
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetJson(this PulumiStackTagListSettings toolSettings, bool? json)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = json;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetJson(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableJson(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableJson(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.Json"/></em></p>
        ///   <p>Emit output as JSON.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleJson(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Json = !toolSettings.Json;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetStack(this PulumiStackTagListSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetStack(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetShowIds(this PulumiStackTagListSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetShowIds(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableShowIds(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableShowIds(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleShowIds(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetShowSecrets(this PulumiStackTagListSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetShowSecrets(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableShowSecrets(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableShowSecrets(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleShowSecrets(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetShowUrns(this PulumiStackTagListSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetShowUrns(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableShowUrns(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableShowUrns(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleShowUrns(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetColor(this PulumiStackTagListSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetColor(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetWorkingDirectory(this PulumiStackTagListSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetWorkingDirectory(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetDisableIntegrityChecking(this PulumiStackTagListSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetDisableIntegrityChecking(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableDisableIntegrityChecking(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableDisableIntegrityChecking(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleDisableIntegrityChecking(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetEmoji(this PulumiStackTagListSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetEmoji(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableEmoji(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableEmoji(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleEmoji(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetHelp(this PulumiStackTagListSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetHelp(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableHelp(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableHelp(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleHelp(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetLogFlow(this PulumiStackTagListSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetLogFlow(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableLogFlow(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableLogFlow(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleLogFlow(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetLogToStderr(this PulumiStackTagListSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetLogToStderr(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableLogToStderr(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableLogToStderr(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleLogToStderr(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetNonInteractive(this PulumiStackTagListSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetNonInteractive(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings EnableNonInteractive(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings DisableNonInteractive(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagListSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ToggleNonInteractive(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetProfiling(this PulumiStackTagListSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetProfiling(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetTracing(this PulumiStackTagListSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetTracing(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagListSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings SetVerbose(this PulumiStackTagListSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagListSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagListSettings ResetVerbose(this PulumiStackTagListSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackTagRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackTagRemoveSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.Name"/></em></p>
        ///   <p>The name of the tag.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetName(this PulumiStackTagRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.Name"/></em></p>
        ///   <p>The name of the tag.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetName(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetStack(this PulumiStackTagRemoveSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetStack(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetShowIds(this PulumiStackTagRemoveSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetShowIds(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings EnableShowIds(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings DisableShowIds(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagRemoveSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ToggleShowIds(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetShowSecrets(this PulumiStackTagRemoveSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetShowSecrets(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings EnableShowSecrets(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings DisableShowSecrets(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagRemoveSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ToggleShowSecrets(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetShowUrns(this PulumiStackTagRemoveSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetShowUrns(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings EnableShowUrns(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings DisableShowUrns(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagRemoveSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ToggleShowUrns(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetColor(this PulumiStackTagRemoveSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetColor(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetWorkingDirectory(this PulumiStackTagRemoveSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetWorkingDirectory(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetDisableIntegrityChecking(this PulumiStackTagRemoveSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetDisableIntegrityChecking(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings EnableDisableIntegrityChecking(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings DisableDisableIntegrityChecking(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagRemoveSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ToggleDisableIntegrityChecking(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetEmoji(this PulumiStackTagRemoveSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetEmoji(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings EnableEmoji(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings DisableEmoji(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagRemoveSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ToggleEmoji(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetHelp(this PulumiStackTagRemoveSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetHelp(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings EnableHelp(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings DisableHelp(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagRemoveSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ToggleHelp(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetLogFlow(this PulumiStackTagRemoveSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetLogFlow(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings EnableLogFlow(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings DisableLogFlow(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagRemoveSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ToggleLogFlow(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetLogToStderr(this PulumiStackTagRemoveSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetLogToStderr(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings EnableLogToStderr(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings DisableLogToStderr(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagRemoveSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ToggleLogToStderr(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetNonInteractive(this PulumiStackTagRemoveSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetNonInteractive(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings EnableNonInteractive(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings DisableNonInteractive(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagRemoveSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ToggleNonInteractive(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetProfiling(this PulumiStackTagRemoveSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetProfiling(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetTracing(this PulumiStackTagRemoveSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetTracing(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagRemoveSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings SetVerbose(this PulumiStackTagRemoveSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagRemoveSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagRemoveSettings ResetVerbose(this PulumiStackTagRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStackTagSetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStackTagSetSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.Name"/></em></p>
        ///   <p>The name of the tag.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetName(this PulumiStackTagSetSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.Name"/></em></p>
        ///   <p>The name of the tag.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetName(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Value
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.Value"/></em></p>
        ///   <p>The value of the tag.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetValue(this PulumiStackTagSetSettings toolSettings, string value)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Value = value;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.Value"/></em></p>
        ///   <p>The value of the tag.</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetValue(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Value = null;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetStack(this PulumiStackTagSetSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetStack(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ShowIds
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetShowIds(this PulumiStackTagSetSettings toolSettings, bool? showIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = showIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetShowIds(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagSetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings EnableShowIds(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagSetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings DisableShowIds(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagSetSettings.ShowIds"/></em></p>
        ///   <p>Display each resource's provider-assigned unique ID</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ToggleShowIds(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowIds = !toolSettings.ShowIds;
            return toolSettings;
        }
        #endregion
        #region ShowSecrets
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetShowSecrets(this PulumiStackTagSetSettings toolSettings, bool? showSecrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = showSecrets;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetShowSecrets(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagSetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings EnableShowSecrets(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagSetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings DisableShowSecrets(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagSetSettings.ShowSecrets"/></em></p>
        ///   <p>Display stack outputs which are marked as secret in plaintext</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ToggleShowSecrets(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSecrets = !toolSettings.ShowSecrets;
            return toolSettings;
        }
        #endregion
        #region ShowUrns
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetShowUrns(this PulumiStackTagSetSettings toolSettings, bool? showUrns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = showUrns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetShowUrns(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagSetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings EnableShowUrns(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagSetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings DisableShowUrns(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagSetSettings.ShowUrns"/></em></p>
        ///   <p>Display each resource's Pulumi-assigned globally unique URN</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ToggleShowUrns(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowUrns = !toolSettings.ShowUrns;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetColor(this PulumiStackTagSetSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetColor(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetWorkingDirectory(this PulumiStackTagSetSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetWorkingDirectory(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetDisableIntegrityChecking(this PulumiStackTagSetSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetDisableIntegrityChecking(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings EnableDisableIntegrityChecking(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings DisableDisableIntegrityChecking(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagSetSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ToggleDisableIntegrityChecking(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetEmoji(this PulumiStackTagSetSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetEmoji(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings EnableEmoji(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings DisableEmoji(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagSetSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ToggleEmoji(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetHelp(this PulumiStackTagSetSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetHelp(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings EnableHelp(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings DisableHelp(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagSetSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ToggleHelp(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetLogFlow(this PulumiStackTagSetSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetLogFlow(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings EnableLogFlow(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings DisableLogFlow(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagSetSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ToggleLogFlow(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetLogToStderr(this PulumiStackTagSetSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetLogToStderr(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings EnableLogToStderr(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings DisableLogToStderr(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagSetSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ToggleLogToStderr(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetNonInteractive(this PulumiStackTagSetSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetNonInteractive(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStackTagSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings EnableNonInteractive(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStackTagSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings DisableNonInteractive(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStackTagSetSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ToggleNonInteractive(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetProfiling(this PulumiStackTagSetSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetProfiling(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetTracing(this PulumiStackTagSetSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetTracing(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStackTagSetSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings SetVerbose(this PulumiStackTagSetSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStackTagSetSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStackTagSetSettings ResetVerbose(this PulumiStackTagSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStateDeleteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStateDeleteSettingsExtensions
    {
        #region ResourceURN
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.ResourceURN"/></em></p>
        ///   <p>The resource as specified by its Pulumi URN (use <c>pulumi stack �show-urns</c> to get it).</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetResourceURN(this PulumiStateDeleteSettings toolSettings, string resourceURN)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceURN = resourceURN;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.ResourceURN"/></em></p>
        ///   <p>The resource as specified by its Pulumi URN (use <c>pulumi stack �show-urns</c> to get it).</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetResourceURN(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceURN = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.Force"/></em></p>
        ///   <p>Force deletion of protected resources.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetForce(this PulumiStateDeleteSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.Force"/></em></p>
        ///   <p>Force deletion of protected resources.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetForce(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateDeleteSettings.Force"/></em></p>
        ///   <p>Force deletion of protected resources.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings EnableForce(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateDeleteSettings.Force"/></em></p>
        ///   <p>Force deletion of protected resources.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings DisableForce(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateDeleteSettings.Force"/></em></p>
        ///   <p>Force deletion of protected resources.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ToggleForce(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetYes(this PulumiStateDeleteSettings toolSettings, bool? yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetYes(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateDeleteSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings EnableYes(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateDeleteSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings DisableYes(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateDeleteSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ToggleYes(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = !toolSettings.Yes;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetStack(this PulumiStateDeleteSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetStack(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetColor(this PulumiStateDeleteSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetColor(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetWorkingDirectory(this PulumiStateDeleteSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetWorkingDirectory(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetDisableIntegrityChecking(this PulumiStateDeleteSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetDisableIntegrityChecking(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateDeleteSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings EnableDisableIntegrityChecking(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateDeleteSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings DisableDisableIntegrityChecking(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateDeleteSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ToggleDisableIntegrityChecking(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetEmoji(this PulumiStateDeleteSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetEmoji(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateDeleteSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings EnableEmoji(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateDeleteSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings DisableEmoji(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateDeleteSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ToggleEmoji(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetHelp(this PulumiStateDeleteSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetHelp(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateDeleteSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings EnableHelp(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateDeleteSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings DisableHelp(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateDeleteSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ToggleHelp(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetLogFlow(this PulumiStateDeleteSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetLogFlow(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateDeleteSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings EnableLogFlow(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateDeleteSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings DisableLogFlow(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateDeleteSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ToggleLogFlow(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetLogToStderr(this PulumiStateDeleteSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetLogToStderr(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateDeleteSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings EnableLogToStderr(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateDeleteSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings DisableLogToStderr(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateDeleteSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ToggleLogToStderr(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetNonInteractive(this PulumiStateDeleteSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetNonInteractive(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateDeleteSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings EnableNonInteractive(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateDeleteSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings DisableNonInteractive(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateDeleteSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ToggleNonInteractive(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetProfiling(this PulumiStateDeleteSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetProfiling(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetTracing(this PulumiStateDeleteSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetTracing(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateDeleteSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings SetVerbose(this PulumiStateDeleteSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateDeleteSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStateDeleteSettings ResetVerbose(this PulumiStateDeleteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiStateUnprotectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiStateUnprotectSettingsExtensions
    {
        #region ResourceURN
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.ResourceURN"/></em></p>
        ///   <p>The resource as specified by its Pulumi URN (use <c>pulumi stack �show-urns</c> to get it).</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetResourceURN(this PulumiStateUnprotectSettings toolSettings, string resourceURN)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceURN = resourceURN;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.ResourceURN"/></em></p>
        ///   <p>The resource as specified by its Pulumi URN (use <c>pulumi stack �show-urns</c> to get it).</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetResourceURN(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResourceURN = null;
            return toolSettings;
        }
        #endregion
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.All"/></em></p>
        ///   <p>Unprotect all resources in the checkpoint.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetAll(this PulumiStateUnprotectSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.All"/></em></p>
        ///   <p>Unprotect all resources in the checkpoint.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetAll(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateUnprotectSettings.All"/></em></p>
        ///   <p>Unprotect all resources in the checkpoint.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings EnableAll(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateUnprotectSettings.All"/></em></p>
        ///   <p>Unprotect all resources in the checkpoint.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings DisableAll(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateUnprotectSettings.All"/></em></p>
        ///   <p>Unprotect all resources in the checkpoint.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ToggleAll(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetYes(this PulumiStateUnprotectSettings toolSettings, bool? yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetYes(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateUnprotectSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings EnableYes(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateUnprotectSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings DisableYes(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateUnprotectSettings.Yes"/></em></p>
        ///   <p>Skip confirmation prompts.</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ToggleYes(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = !toolSettings.Yes;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetStack(this PulumiStateUnprotectSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetStack(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetColor(this PulumiStateUnprotectSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetColor(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetWorkingDirectory(this PulumiStateUnprotectSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetWorkingDirectory(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetDisableIntegrityChecking(this PulumiStateUnprotectSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetDisableIntegrityChecking(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateUnprotectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings EnableDisableIntegrityChecking(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateUnprotectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings DisableDisableIntegrityChecking(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateUnprotectSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ToggleDisableIntegrityChecking(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetEmoji(this PulumiStateUnprotectSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetEmoji(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateUnprotectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings EnableEmoji(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateUnprotectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings DisableEmoji(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateUnprotectSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ToggleEmoji(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetHelp(this PulumiStateUnprotectSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetHelp(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateUnprotectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings EnableHelp(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateUnprotectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings DisableHelp(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateUnprotectSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ToggleHelp(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetLogFlow(this PulumiStateUnprotectSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetLogFlow(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateUnprotectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings EnableLogFlow(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateUnprotectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings DisableLogFlow(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateUnprotectSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ToggleLogFlow(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetLogToStderr(this PulumiStateUnprotectSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetLogToStderr(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateUnprotectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings EnableLogToStderr(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateUnprotectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings DisableLogToStderr(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateUnprotectSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ToggleLogToStderr(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetNonInteractive(this PulumiStateUnprotectSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetNonInteractive(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiStateUnprotectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings EnableNonInteractive(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiStateUnprotectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings DisableNonInteractive(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiStateUnprotectSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ToggleNonInteractive(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetProfiling(this PulumiStateUnprotectSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetProfiling(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetTracing(this PulumiStateUnprotectSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetTracing(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiStateUnprotectSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings SetVerbose(this PulumiStateUnprotectSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiStateUnprotectSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiStateUnprotectSettings ResetVerbose(this PulumiStateUnprotectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region PulumiUpSettingsExtensions
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class PulumiUpSettingsExtensions
    {
        #region Config
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Config"/> to a new list</em></p>
        ///   <p>Config to use during the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetConfig(this PulumiUpSettings toolSettings, params string[] config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal = config.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Config"/> to a new list</em></p>
        ///   <p>Config to use during the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetConfig(this PulumiUpSettings toolSettings, IEnumerable<string> config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal = config.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiUpSettings.Config"/></em></p>
        ///   <p>Config to use during the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings AddConfig(this PulumiUpSettings toolSettings, params string[] config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal.AddRange(config);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiUpSettings.Config"/></em></p>
        ///   <p>Config to use during the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings AddConfig(this PulumiUpSettings toolSettings, IEnumerable<string> config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal.AddRange(config);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="PulumiUpSettings.Config"/></em></p>
        ///   <p>Config to use during the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ClearConfig(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiUpSettings.Config"/></em></p>
        ///   <p>Config to use during the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings RemoveConfig(this PulumiUpSettings toolSettings, params string[] config)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(config);
            toolSettings.ConfigInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiUpSettings.Config"/></em></p>
        ///   <p>Config to use during the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings RemoveConfig(this PulumiUpSettings toolSettings, IEnumerable<string> config)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(config);
            toolSettings.ConfigInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ConfigPath
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetConfigPath(this PulumiUpSettings toolSettings, bool? configPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = configPath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetConfigPath(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableConfigPath(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableConfigPath(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.ConfigPath"/></em></p>
        ///   <p>Config keys contain a path to a property in a map or list to set.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleConfigPath(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigPath = !toolSettings.ConfigPath;
            return toolSettings;
        }
        #endregion
        #region Debug
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetDebug(this PulumiUpSettings toolSettings, bool? debug)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = debug;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetDebug(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableDebug(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableDebug(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.Debug"/></em></p>
        ///   <p>Print detailed debugging output during resource operations.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleDebug(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Debug = !toolSettings.Debug;
            return toolSettings;
        }
        #endregion
        #region Diff
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetDiff(this PulumiUpSettings toolSettings, bool? diff)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = diff;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetDiff(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableDiff(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableDiff(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.Diff"/></em></p>
        ///   <p>Display operation as a rich diff showing the overall change.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleDiff(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Diff = !toolSettings.Diff;
            return toolSettings;
        }
        #endregion
        #region ExpectNoChanges
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetExpectNoChanges(this PulumiUpSettings toolSettings, bool? expectNoChanges)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = expectNoChanges;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetExpectNoChanges(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableExpectNoChanges(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableExpectNoChanges(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.ExpectNoChanges"/></em></p>
        ///   <p>Return an error if any changes are proposed by this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleExpectNoChanges(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExpectNoChanges = !toolSettings.ExpectNoChanges;
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Message"/></em></p>
        ///   <p>Optional message to associate with the update operation.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetMessage(this PulumiUpSettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Message"/></em></p>
        ///   <p>Optional message to associate with the update operation.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetMessage(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region Parallel
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Parallel"/></em></p>
        ///   <p>Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetParallel(this PulumiUpSettings toolSettings, int? parallel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Parallel = parallel;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Parallel"/></em></p>
        ///   <p>Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647).</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetParallel(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Parallel = null;
            return toolSettings;
        }
        #endregion
        #region Refresh
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetRefresh(this PulumiUpSettings toolSettings, bool? refresh)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = refresh;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetRefresh(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableRefresh(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableRefresh(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.Refresh"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleRefresh(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Refresh = !toolSettings.Refresh;
            return toolSettings;
        }
        #endregion
        #region Replace
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Replace"/> to a new list</em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetReplace(this PulumiUpSettings toolSettings, params string[] replace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal = replace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Replace"/> to a new list</em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetReplace(this PulumiUpSettings toolSettings, IEnumerable<string> replace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal = replace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiUpSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings AddReplace(this PulumiUpSettings toolSettings, params string[] replace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal.AddRange(replace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiUpSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings AddReplace(this PulumiUpSettings toolSettings, IEnumerable<string> replace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal.AddRange(replace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="PulumiUpSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ClearReplace(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplaceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiUpSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings RemoveReplace(this PulumiUpSettings toolSettings, params string[] replace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(replace);
            toolSettings.ReplaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiUpSettings.Replace"/></em></p>
        ///   <p>Refresh the state of the stack's resources before this update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings RemoveReplace(this PulumiUpSettings toolSettings, IEnumerable<string> replace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(replace);
            toolSettings.ReplaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region SecretsProvider
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.SecretsProvider"/></em></p>
        ///   <p>The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault). Only used when creating a new stack from an existing template (default: default).</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetSecretsProvider(this PulumiUpSettings toolSettings, string secretsProvider)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsProvider = secretsProvider;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.SecretsProvider"/></em></p>
        ///   <p>The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault). Only used when creating a new stack from an existing template (default: default).</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetSecretsProvider(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsProvider = null;
            return toolSettings;
        }
        #endregion
        #region ShowConfig
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetShowConfig(this PulumiUpSettings toolSettings, bool? showConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = showConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetShowConfig(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableShowConfig(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableShowConfig(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.ShowConfig"/></em></p>
        ///   <p>Show configuration keys and variables.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleShowConfig(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowConfig = !toolSettings.ShowConfig;
            return toolSettings;
        }
        #endregion
        #region ShowReads
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.ShowReads"/></em></p>
        ///   <p>Show resources that are being read in, alongside those being managed directly in the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetShowReads(this PulumiUpSettings toolSettings, bool? showReads)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReads = showReads;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.ShowReads"/></em></p>
        ///   <p>Show resources that are being read in, alongside those being managed directly in the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetShowReads(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReads = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.ShowReads"/></em></p>
        ///   <p>Show resources that are being read in, alongside those being managed directly in the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableShowReads(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReads = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.ShowReads"/></em></p>
        ///   <p>Show resources that are being read in, alongside those being managed directly in the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableShowReads(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReads = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.ShowReads"/></em></p>
        ///   <p>Show resources that are being read in, alongside those being managed directly in the stack.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleShowReads(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReads = !toolSettings.ShowReads;
            return toolSettings;
        }
        #endregion
        #region ShowReplacementSteps
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetShowReplacementSteps(this PulumiUpSettings toolSettings, bool? showReplacementSteps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = showReplacementSteps;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetShowReplacementSteps(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableShowReplacementSteps(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableShowReplacementSteps(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.ShowReplacementSteps"/></em></p>
        ///   <p>Show detailed resource replacement creates and deletes instead of a single step.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleShowReplacementSteps(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowReplacementSteps = !toolSettings.ShowReplacementSteps;
            return toolSettings;
        }
        #endregion
        #region ShowSames
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetShowSames(this PulumiUpSettings toolSettings, bool? showSames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = showSames;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetShowSames(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableShowSames(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableShowSames(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.ShowSames"/></em></p>
        ///   <p>Show resources that don't need to be updated because they haven't changed, alongside those that do.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleShowSames(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShowSames = !toolSettings.ShowSames;
            return toolSettings;
        }
        #endregion
        #region SkipPreview
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetSkipPreview(this PulumiUpSettings toolSettings, bool? skipPreview)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = skipPreview;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetSkipPreview(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableSkipPreview(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableSkipPreview(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.SkipPreview"/></em></p>
        ///   <p>Do not perform a preview before performing the update.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleSkipPreview(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipPreview = !toolSettings.SkipPreview;
            return toolSettings;
        }
        #endregion
        #region SuppressOutputs
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetSuppressOutputs(this PulumiUpSettings toolSettings, bool? suppressOutputs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = suppressOutputs;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetSuppressOutputs(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableSuppressOutputs(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableSuppressOutputs(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.SuppressOutputs"/></em></p>
        ///   <p>Suppress display of stack outputs (in case they contain sensitive values).</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleSuppressOutputs(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SuppressOutputs = !toolSettings.SuppressOutputs;
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Target"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetTarget(this PulumiUpSettings toolSettings, params string[] target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal = target.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Target"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetTarget(this PulumiUpSettings toolSettings, IEnumerable<string> target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal = target.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiUpSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings AddTarget(this PulumiUpSettings toolSettings, params string[] target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal.AddRange(target);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiUpSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings AddTarget(this PulumiUpSettings toolSettings, IEnumerable<string> target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal.AddRange(target);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="PulumiUpSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ClearTarget(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiUpSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings RemoveTarget(this PulumiUpSettings toolSettings, params string[] target)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(target);
            toolSettings.TargetInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiUpSettings.Target"/></em></p>
        ///   <p>Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings RemoveTarget(this PulumiUpSettings toolSettings, IEnumerable<string> target)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(target);
            toolSettings.TargetInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region TargetDependents
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetTargetDependents(this PulumiUpSettings toolSettings, bool? targetDependents)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = targetDependents;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetTargetDependents(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableTargetDependents(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableTargetDependents(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.TargetDependents"/></em></p>
        ///   <p>Allows updating of dependent targets discovered but not specified in --target list.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleTargetDependents(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDependents = !toolSettings.TargetDependents;
            return toolSettings;
        }
        #endregion
        #region TargetReplace
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.TargetReplace"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetTargetReplace(this PulumiUpSettings toolSettings, params string[] targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal = targetReplace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.TargetReplace"/> to a new list</em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetTargetReplace(this PulumiUpSettings toolSettings, IEnumerable<string> targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal = targetReplace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiUpSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings AddTargetReplace(this PulumiUpSettings toolSettings, params string[] targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal.AddRange(targetReplace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="PulumiUpSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings AddTargetReplace(this PulumiUpSettings toolSettings, IEnumerable<string> targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal.AddRange(targetReplace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="PulumiUpSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ClearTargetReplace(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetReplaceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiUpSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings RemoveTargetReplace(this PulumiUpSettings toolSettings, params string[] targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(targetReplace);
            toolSettings.TargetReplaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="PulumiUpSettings.TargetReplace"/></em></p>
        ///   <p>Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings RemoveTargetReplace(this PulumiUpSettings toolSettings, IEnumerable<string> targetReplace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(targetReplace);
            toolSettings.TargetReplaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the update after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetYes(this PulumiUpSettings toolSettings, bool? yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the update after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetYes(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the update after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableYes(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the update after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableYes(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.Yes"/></em></p>
        ///   <p>Automatically approve and perform the update after previewing it.</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleYes(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = !toolSettings.Yes;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetStack(this PulumiUpSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Stack"/></em></p>
        ///   <p>The name of the stack to operate on. Defaults to the current stack</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetStack(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
        #region ConfigFile
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetConfigFile(this PulumiUpSettings toolSettings, string configFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = configFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.ConfigFile"/></em></p>
        ///   <p>Use the configuration values in the specified file rather than detecting the file name</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetConfigFile(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFile = null;
            return toolSettings;
        }
        #endregion
        #region Color
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetColor(this PulumiUpSettings toolSettings, ColorizeOutput color)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = color;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Color"/></em></p>
        ///   <p>Colorize output. Choices are: always, never, raw, auto (default is auto)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetColor(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Color = null;
            return toolSettings;
        }
        #endregion
        #region WorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetWorkingDirectory(this PulumiUpSettings toolSettings, string workingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = workingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.WorkingDirectory"/></em></p>
        ///   <p>Run pulumi as if it had been started in another directory</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetWorkingDirectory(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region DisableIntegrityChecking
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetDisableIntegrityChecking(this PulumiUpSettings toolSettings, bool? disableIntegrityChecking)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = disableIntegrityChecking;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetDisableIntegrityChecking(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableDisableIntegrityChecking(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableDisableIntegrityChecking(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.DisableIntegrityChecking"/></em></p>
        ///   <p>Disable integrity checking of checkpoint files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleDisableIntegrityChecking(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableIntegrityChecking = !toolSettings.DisableIntegrityChecking;
            return toolSettings;
        }
        #endregion
        #region Emoji
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetEmoji(this PulumiUpSettings toolSettings, bool? emoji)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = emoji;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetEmoji(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableEmoji(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableEmoji(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.Emoji"/></em></p>
        ///   <p>Enable emojis in the output (default is true)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleEmoji(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Emoji = !toolSettings.Emoji;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetHelp(this PulumiUpSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetHelp(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableHelp(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableHelp(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.Help"/></em></p>
        ///   <p>Help for Pulumi</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleHelp(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region LogFlow
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetLogFlow(this PulumiUpSettings toolSettings, bool? logFlow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = logFlow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetLogFlow(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableLogFlow(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableLogFlow(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.LogFlow"/></em></p>
        ///   <p>Flow log settings to child processes (like plugins)</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleLogFlow(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogFlow = !toolSettings.LogFlow;
            return toolSettings;
        }
        #endregion
        #region LogToStderr
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetLogToStderr(this PulumiUpSettings toolSettings, bool? logToStderr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = logToStderr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetLogToStderr(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableLogToStderr(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableLogToStderr(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.LogToStderr"/></em></p>
        ///   <p>Log to stderr instead of to files</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleLogToStderr(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogToStderr = !toolSettings.LogToStderr;
            return toolSettings;
        }
        #endregion
        #region NonInteractive
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetNonInteractive(this PulumiUpSettings toolSettings, bool? nonInteractive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = nonInteractive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetNonInteractive(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="PulumiUpSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings EnableNonInteractive(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="PulumiUpSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings DisableNonInteractive(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="PulumiUpSettings.NonInteractive"/></em></p>
        ///   <p>Disable interactive mode for all commands</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ToggleNonInteractive(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NonInteractive = !toolSettings.NonInteractive;
            return toolSettings;
        }
        #endregion
        #region Profiling
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetProfiling(this PulumiUpSettings toolSettings, string profiling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = profiling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Profiling"/></em></p>
        ///   <p>Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetProfiling(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Profiling = null;
            return toolSettings;
        }
        #endregion
        #region Tracing
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetTracing(this PulumiUpSettings toolSettings, string tracing)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = tracing;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Tracing"/></em></p>
        ///   <p>Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetTracing(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tracing = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="PulumiUpSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings SetVerbose(this PulumiUpSettings toolSettings, int? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="PulumiUpSettings.Verbose"/></em></p>
        ///   <p>Enable verbose logging (e.g., v=3); anything >3 is very verbose</p>
        /// </summary>
        [Pure]
        public static PulumiUpSettings ResetVerbose(this PulumiUpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region ColorizeOutput
    /// <summary>
    ///   Used within <see cref="PulumiTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<ColorizeOutput>))]
    public partial class ColorizeOutput : Enumeration
    {
        public static ColorizeOutput Always = (ColorizeOutput) "Always";
        public static ColorizeOutput Never = (ColorizeOutput) "Never";
        public static ColorizeOutput Raw = (ColorizeOutput) "Raw";
        public static ColorizeOutput Auto = (ColorizeOutput) "Auto";
        public static explicit operator ColorizeOutput(string value)
        {
            return new ColorizeOutput { Value = value };
        }
    }
    #endregion
}
